--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.TMXMapInfo
local m = {}

--- 
---@param currentString string
---@return cc.TMXMapInfo
function m:setCurrentString(currentString) end

--- / map hexsidelength
---@return int
function m:getHexSideLength() end

--- 
---@param tileSize cc.size
---@return cc.TMXMapInfo
function m:setTileSize(tileSize) end

---  initializes a TMX format with a  tmx file 
---@param tmxFile string
---@return boolean
function m:initWithTMXFile(tmxFile) end

--- / map orientation
---@return int
function m:getOrientation() end

--- 
---@param groups any[]
---@return cc.TMXMapInfo
function m:setObjectGroups(groups) end

--- 
---@param layers any[]
---@return cc.TMXMapInfo
function m:setLayers(layers) end

---  initializes parsing of an XML file, either a tmx (Map) file or tsx (Tileset) file 
---@param xmlFilename string
---@return boolean
function m:parseXMLFile(xmlFilename) end

--- / parent element
---@return int
function m:getParentElement() end

--- 
---@param fileName string
---@return cc.TMXMapInfo
function m:setTMXFileName(fileName) end

--- 
---@param xmlString string
---@return boolean
function m:parseXMLString(xmlString) end

---@return any[]
function m:getLayers() end

--- / map staggeraxis
---@return int
function m:getStaggerAxis() end

--- 
---@param hexSideLength int
---@return cc.TMXMapInfo
function m:setHexSideLength(hexSideLength) end

---@return any[]
function m:getTilesets() end

--- / parent GID
---@return int
function m:getParentGID() end

--- 
---@param element int
---@return cc.TMXMapInfo
function m:setParentElement(element) end

---  initializes a TMX format with an XML string and a TMX resource path 
---@param tmxString string
---@param resourcePath string
---@return boolean
function m:initWithXML(tmxString, resourcePath) end

--- 
---@param gid int
---@return cc.TMXMapInfo
function m:setParentGID(gid) end

--- / layer attribs
---@return int
function m:getLayerAttribs() end

--- / tiles width & height
---@return cc.size
function m:getTileSize() end

--- 
---@return table<any:any>
function m:getTileProperties() end

--- / is storing characters?
---@return boolean
function m:isStoringCharacters() end

--- 
---@return string
function m:getExternalTilesetFileName() end

---@return any[]
function m:getObjectGroups() end

--- 
---@return string
function m:getTMXFileName() end

--- 
---@param staggerIndex int
---@return cc.TMXMapInfo
function m:setStaggerIndex(staggerIndex) end

--- 
---@param properties table<any:any>
---@return cc.TMXMapInfo
function m:setProperties(properties) end

--- 
---@param orientation int
---@return cc.TMXMapInfo
function m:setOrientation(orientation) end

--- 
---@param tileProperties table<any:any>
---@return cc.TMXMapInfo
function m:setTileProperties(tileProperties) end

--- 
---@param mapSize cc.size
---@return cc.TMXMapInfo
function m:setMapSize(mapSize) end

--- 
---@return string
function m:getCurrentString() end

--- 
---@param storingCharacters boolean
---@return cc.TMXMapInfo
function m:setStoringCharacters(storingCharacters) end

--- 
---@param staggerAxis int
---@return cc.TMXMapInfo
function m:setStaggerAxis(staggerAxis) end

--- / map width & height
---@return cc.size
function m:getMapSize() end

--- 
---@param tilesets any[]
---@return cc.TMXMapInfo
function m:setTilesets(tilesets) end

---@return table<any:any>
function m:getProperties() end

--- / map stagger index
---@return int
function m:getStaggerIndex() end

--- 
---@param layerAttribs int
---@return cc.TMXMapInfo
function m:setLayerAttribs(layerAttribs) end

---  creates a TMX Format with a tmx file 
---@param tmxFile string
---@return cc.TMXMapInfo
function m:create(tmxFile) end

---  creates a TMX Format with an XML string and a TMX resource path 
---@param tmxString string
---@param resourcePath string
---@return cc.TMXMapInfo
function m:createWithXML(tmxString, resourcePath) end

--- js ctor
---@return cc.TMXMapInfo
function m:TMXMapInfo() end



return m