--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.Sprite : cc.Node,cc.TextureProtocol
local m = {}

---@overload fun(self:cc.Sprite, spriteFrameName:cc.SpriteFrame):cc.Sprite
---@param spriteFrameName string
---@return cc.Sprite
function m:setSpriteFrame(spriteFrameName) end

---@overload fun(self:cc.Sprite, filename:cc.Texture2D):cc.Sprite
---@param filename string
---@return cc.Sprite
function m:setTexture(filename) end

---  Returns the Texture2D object used by the sprite. 
---@return cc.Texture2D
function m:getTexture() end

--- Sets whether the sprite should be flipped vertically or not.<br>
--- param flippedY true if the sprite should be flipped vertically, false otherwise.
---@param flippedY boolean
---@return cc.Sprite
function m:setFlippedY(flippedY) end

--- Sets whether the sprite should be flipped horizontally or not.<br>
--- param flippedX true if the sprite should be flipped horizontally, false otherwise.
---@param flippedX boolean
---@return cc.Sprite
function m:setFlippedX(flippedX) end

---@return int
function m:getResourceType() end

--- Changes the display frame with animation name and index.<br>
--- The animation name will be get from the AnimationCache.
---@param animationName string
---@param frameIndex int
---@return cc.Sprite
function m:setDisplayFrameWithAnimationName(animationName, frameIndex) end

--- Returns the batch node object if this sprite is rendered by SpriteBatchNode.<br>
--- return The SpriteBatchNode object if this sprite is rendered by SpriteBatchNode,<br>
--- nullptr if the sprite isn't used batch node.
---@return cc.SpriteBatchNode
function m:getBatchNode() end

--- Gets the offset position of the sprite. Calculated automatically by editors like Zwoptex.
---@return cc.vec2
function m:getOffsetPosition() end

--- brief Returns the Cap Insets rect<br>
--- return Scale9Sprite's cap inset.
---@return cc.rect
function m:getCenterRect() end

--- 
---@param cleanup boolean
---@return cc.Sprite
function m:removeAllChildrenWithCleanup(cleanup) end

--- setCenterRectNormalized<br>
--- Useful to implement "9 sliced" sprites.<br>
--- The default value is (0,0) - (1,1), which means that only one "slice" will be used: From top-left (0,0) to bottom-right (1,1).<br>
--- If the value is different than (0,0), (1,1), then the sprite will be sliced into a 3 x 3 grid. The four corners of this grid are applied without<br>
--- performing any scaling. The upper- and lower-middle parts are scaled horizontally, and the left- and right-middle parts are scaled vertically.<br>
--- The center is scaled in both directions.<br>
--- Important: The scaling is based the Sprite's trimmed size.<br>
--- Limitations: Does not work when the sprite is part of `SpriteBatchNode`.
---@param rect cc.rect
---@return cc.Sprite
function m:setCenterRectNormalized(rect) end

---  returns whether or not contentSize stretches the sprite's texture 
---@return boolean
function m:isStretchEnabled() end

---@overload fun(self:cc.Sprite, rect:cc.rect):cc.Sprite
---@param rect cc.rect
---@param rotated boolean
---@param untrimmedSize cc.size
---@return cc.Sprite
function m:setTextureRect(rect, rotated, untrimmedSize) end

--- Initializes a sprite with an sprite frame name.<br>
--- A SpriteFrame will be fetched from the SpriteFrameCache by name.<br>
--- If the SpriteFrame doesn't exist it will raise an exception.<br>
--- param   spriteFrameName  A key string that can fetched a valid SpriteFrame from SpriteFrameCache.<br>
--- return  True if the sprite is initialized properly, false otherwise.
---@param spriteFrameName string
---@return boolean
function m:initWithSpriteFrameName(spriteFrameName) end

---  whether or not contentSize stretches the sprite's texture 
---@param enabled boolean
---@return cc.Sprite
function m:setStretchEnabled(enabled) end

--- Returns whether or not a SpriteFrame is being displayed.
---@param frame cc.SpriteFrame
---@return boolean
function m:isFrameDisplayed(frame) end

--- Returns the index used on the TextureAtlas.
---@return int
function m:getAtlasIndex() end

--- Sets the batch node to sprite.<br>
--- warning This method is not recommended for game developers. Sample code for using batch node<br>
--- code<br>
--- SpriteBatchNode *batch = SpriteBatchNode::create("Images/grossini_dance_atlas.png", 15);<br>
--- Sprite *sprite = Sprite::createWithTexture(batch->getTexture(), Rect(0, 0, 57, 57));<br>
--- batch->addChild(sprite);<br>
--- layer->addChild(batch);<br>
--- endcode
---@param spriteBatchNode cc.SpriteBatchNode
---@return cc.Sprite
function m:setBatchNode(spriteBatchNode) end

--- js  NA<br>
--- lua NA
---@return cc.BlendFunc
function m:getBlendFunc() end

--- 
---@param rect cc.rect
---@return cc.Sprite
function m:setCenterRect(rect) end

--- Sets the weak reference of the TextureAtlas when the sprite is rendered using via SpriteBatchNode.
---@param textureAtlas cc.TextureAtlas
---@return cc.Sprite
function m:setTextureAtlas(textureAtlas) end

--- Returns the current displayed frame.
---@return cc.SpriteFrame
function m:getSpriteFrame() end

--- 
---@return string
function m:getResourceName() end

--- Whether or not the Sprite needs to be updated in the Atlas.<br>
--- return True if the sprite needs to be updated in the Atlas, false otherwise.
---@return boolean
function m:isDirty() end

--- getCenterRectNormalized<br>
--- Returns the CenterRect in normalized coordinates
---@return cc.rect
function m:getCenterRectNormalized() end

--- Sets the index used on the TextureAtlas.<br>
--- warning Don't modify this value unless you know what you are doing.
---@param atlasIndex int
---@return cc.Sprite
function m:setAtlasIndex(atlasIndex) end

---@overload fun(self:cc.Sprite, texture:cc.Texture2D, rect:cc.rect):boolean
---@overload fun(self:cc.Sprite, texture:cc.Texture2D):boolean
---@param texture cc.Texture2D
---@param rect cc.rect
---@param rotated boolean
---@return boolean
function m:initWithTexture(texture, rect, rotated) end

--- Makes the Sprite to be updated in the Atlas.
---@param dirty boolean
---@return cc.Sprite
function m:setDirty(dirty) end

--- Returns whether or not the texture rectangle is rotated.
---@return boolean
function m:isTextureRectRotated() end

--- Returns the rect of the Sprite in points.
---@return cc.rect
function m:getTextureRect() end

---@overload fun(self:cc.Sprite, filename:string):boolean
---@param filename string
---@param rect cc.rect
---@return boolean
function m:initWithFile(filename, rect) end

--- code<br>
--- When this function bound into js or lua,the parameter will be changed.<br>
--- In js: var setBlendFunc(var src, var dst).<br>
--- In lua: local setBlendFunc(local src, local dst).<br>
--- endcode
---@param blendFunc cc.BlendFunc
---@return cc.Sprite
function m:setBlendFunc(blendFunc) end

--- Gets the weak reference of the TextureAtlas when the sprite is rendered using via SpriteBatchNode.
---@return cc.TextureAtlas
function m:getTextureAtlas() end

--- Initializes a sprite with an SpriteFrame. The texture and rect in SpriteFrame will be applied on this sprite.<br>
--- param   spriteFrame  A SpriteFrame object. It should includes a valid texture and a rect.<br>
--- return  True if the sprite is initialized properly, false otherwise.
---@param spriteFrame cc.SpriteFrame
---@return boolean
function m:initWithSpriteFrame(spriteFrame) end

--- Returns the flag which indicates whether the sprite is flipped horizontally or not.<br>
--- It only flips the texture of the sprite, and not the texture of the sprite's children.<br>
--- Also, flipping the texture doesn't alter the anchorPoint.<br>
--- If you want to flip the anchorPoint too, and/or to flip the children too use:<br>
--- sprite->setScaleX(sprite->getScaleX() * -1);<br>
--- return true if the sprite is flipped horizontally, false otherwise.
---@return boolean
function m:isFlippedX() end

--- Return the flag which indicates whether the sprite is flipped vertically or not.<br>
--- It only flips the texture of the sprite, and not the texture of the sprite's children.<br>
--- Also, flipping the texture doesn't alter the anchorPoint.<br>
--- If you want to flip the anchorPoint too, and/or to flip the children too use:<br>
--- sprite->setScaleY(sprite->getScaleY() * -1);<br>
--- return true if the sprite is flipped vertically, false otherwise.
---@return boolean
function m:isFlippedY() end

--- Sets the vertex rect.<br>
--- It will be called internally by setTextureRect.<br>
--- Useful if you want to create 2x images from SD images in Retina Display.<br>
--- Do not call it manually. Use setTextureRect instead.
---@param rect cc.rect
---@return cc.Sprite
function m:setVertexRect(rect) end

---@overload fun(self:cc.Sprite, texture:cc.Texture2D):cc.Sprite
---@param texture cc.Texture2D
---@param rect cc.rect
---@param rotated boolean
---@return cc.Sprite
function m:createWithTexture(texture, rect, rotated) end

--- Creates a sprite with an sprite frame name.<br>
--- A SpriteFrame will be fetched from the SpriteFrameCache by spriteFrameName param.<br>
--- If the SpriteFrame doesn't exist it will raise an exception.<br>
--- param   spriteFrameName A null terminated string which indicates the sprite frame name.<br>
--- return  An autoreleased sprite object.
---@param spriteFrameName string
---@return cc.Sprite
function m:createWithSpriteFrameName(spriteFrameName) end

--- Creates a sprite with an sprite frame.<br>
--- param   spriteFrame    A sprite frame which involves a texture and a rect.<br>
--- return  An autoreleased sprite object.
---@param spriteFrame cc.SpriteFrame
---@return cc.Sprite
function m:createWithSpriteFrame(spriteFrame) end

---@overload fun(self:cc.Sprite, child:cc.Node, zOrder:int, tag:string):cc.Sprite
---@param child cc.Node
---@param zOrder int
---@param tag int
---@return cc.Sprite
function m:addChild(child, zOrder, tag) end

--- 
---@param anchor cc.vec2
---@return cc.Sprite
function m:setAnchorPoint(anchor) end

--- 
---@param rotationX float
---@return cc.Sprite
function m:setRotationSkewX(rotationX) end

--- 
---@param scaleY float
---@return cc.Sprite
function m:setScaleY(scaleY) end

---@overload fun(self:cc.Sprite, scaleX:float):cc.Sprite
---@param scaleX float
---@param scaleY float
---@return cc.Sprite
function m:setScale(scaleX, scaleY) end

--- 
---@param size cc.size
---@return cc.Sprite
function m:setContentSize(size) end

--- 
---@return boolean
function m:isOpacityModifyRGB() end

--- 
---@param modify boolean
---@return cc.Sprite
function m:setOpacityModifyRGB(modify) end

--- 
---@return boolean
function m:init() end

--- 
---@param rotation float
---@return cc.Sprite
function m:setRotation(rotation) end

--- 
---@param value boolean
---@return cc.Sprite
function m:setIgnoreAnchorPointForPosition(value) end

--- 
---@param renderer cc.Renderer
---@param transform mat4_table
---@param flags uint
---@return cc.Sprite
function m:draw(renderer, transform, flags) end

---@param scaleX float
---@return cc.Sprite
function m:setScaleX(scaleX) end

--- js NA
---@return string
function m:getDescription() end

--- 
---@param rotationY float
---@return cc.Sprite
function m:setRotationSkewY(rotationY) end

--- 
---@return cc.Sprite
function m:sortAllChildren() end

--- 
---@param child cc.Node
---@param zOrder int
---@return cc.Sprite
function m:reorderChild(child, zOrder) end

--- 
---@param positionZ float
---@return cc.Sprite
function m:setPositionZ(positionZ) end

--- 
---@param child cc.Node
---@param cleanup boolean
---@return cc.Sprite
function m:removeChild(child, cleanup) end

--- Updates the quad according the rotation, position, scale values.
---@return cc.Sprite
function m:updateTransform() end

--- 
---@param sx float
---@return cc.Sprite
function m:setSkewX(sx) end

--- 
---@param sy float
---@return cc.Sprite
function m:setSkewY(sy) end

--- 
---@param bVisible boolean
---@return cc.Sprite
function m:setVisible(bVisible) end

--- js ctor
---@return cc.Sprite
function m:Sprite() end



return m