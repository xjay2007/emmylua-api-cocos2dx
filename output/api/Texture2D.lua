--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.Texture2D : cc.Ref
local m = {}

---  Gets max T. 
---@return float
function m:getMaxT() end

--- 
---@param alphaTexture cc.Texture2D
---@return cc.Texture2D
function m:setAlphaTexture(alphaTexture) end

---  Returns the pixel format.<br>
--- since v2.0
---@return char
function m:getStringForFormat() end

---@overload fun(self:cc.Texture2D, image:cc.Image):boolean
---@param image cc.Image
---@param format int
---@return boolean
function m:initWithImage(image, format) end

---  Gets max S. 
---@return float
function m:getMaxS() end

---  Release only the gl texture.<br>
--- js NA<br>
--- lua NA
---@return cc.Texture2D
function m:releaseGLTexture() end

---  Whether or not the texture has their Alpha premultiplied. 
---@return boolean
function m:hasPremultipliedAlpha() end

---  Gets the height of the texture in pixels. 
---@return int
function m:getPixelsHigh() end

--- 
---@return uint
function m:getAlphaTextureName() end

---@overload fun(self:cc.Texture2D):uint
---@param format int
---@return uint
function m:getBitsPerPixelForFormat(format) end

---  Gets the texture name. 
---@return uint
function m:getName() end

---@overload fun(self:cc.Texture2D, text:char, fontName:cc.FontDefinition):boolean
---@param text char
---@param fontName string
---@param fontSize float
---@param dimensions cc.size
---@param hAlignment int
---@param vAlignment int
---@param enableWrap boolean
---@param overflow int
---@return boolean
function m:initWithString(text, fontName, fontSize, dimensions, hAlignment, vAlignment, enableWrap, overflow) end

---  Sets max T. 
---@param maxT float
---@return cc.Texture2D
function m:setMaxT(maxT) end

--- 
---@return string
function m:getPath() end

---  Draws a texture inside a rect.
---@param rect cc.rect
---@return cc.Texture2D
function m:drawInRect(rect) end

---  Get the texture content size.
---@return cc.size
function m:getContentSize() end

---  Sets alias texture parameters:<br>
--- - GL_TEXTURE_MIN_FILTER = GL_NEAREST<br>
--- - GL_TEXTURE_MAG_FILTER = GL_NEAREST<br>
--- warning Calling this method could allocate additional texture memory.<br>
--- since v0.8
---@return cc.Texture2D
function m:setAliasTexParameters() end

---  Sets antialias texture parameters:<br>
--- - GL_TEXTURE_MIN_FILTER = GL_LINEAR<br>
--- - GL_TEXTURE_MAG_FILTER = GL_LINEAR<br>
--- warning Calling this method could allocate additional texture memory.<br>
--- since v0.8
---@return cc.Texture2D
function m:setAntiAliasTexParameters() end

---  Generates mipmap images for the texture.<br>
--- It only works if the texture size is POT (power of 2).<br>
--- since v0.99.0
---@return cc.Texture2D
function m:generateMipmap() end

--- 
---@return cc.Texture2D
function m:getAlphaTexture() end

--- Get texture name, dimensions and coordinates message by a string.<br>
--- js NA<br>
--- lua NA
---@return string
function m:getDescription() end

---  Gets the pixel format of the texture. 
---@return int
function m:getPixelFormat() end

---  Set a shader program to the texture.<br>
--- It's used by drawAtPoint and drawInRect
---@param program cc.GLProgram
---@return cc.Texture2D
function m:setGLProgram(program) end

---  Get content size. 
---@return cc.size
function m:getContentSizeInPixels() end

---  Gets the width of the texture in pixels. 
---@return int
function m:getPixelsWide() end

--- Drawing extensions to make it easy to draw basic quads using a Texture2D object.<br>
--- These functions require GL_TEXTURE_2D and both GL_VERTEX_ARRAY and GL_TEXTURE_COORD_ARRAY client states to be enabled.<br>
--- Draws a texture at a given point. 
---@param point cc.vec2
---@return cc.Texture2D
function m:drawAtPoint(point) end

---  Get a shader program from the texture.
---@return cc.GLProgram
function m:getGLProgram() end

---  Whether or not the texture has mip maps.
---@return boolean
function m:hasMipmaps() end

---  Sets max S. 
---@param maxS float
---@return cc.Texture2D
function m:setMaxS(maxS) end

---  sets the default pixel format for UIImagescontains alpha channel.<br>
--- param format<br>
--- If the UIImage contains alpha channel, then the options are:<br>
--- - generate 32-bit textures: Texture2D::PixelFormat::RGBA8888 (default one)<br>
--- - generate 24-bit textures: Texture2D::PixelFormat::RGB888<br>
--- - generate 16-bit textures: Texture2D::PixelFormat::RGBA4444<br>
--- - generate 16-bit textures: Texture2D::PixelFormat::RGB5A1<br>
--- - generate 16-bit textures: Texture2D::PixelFormat::RGB565<br>
--- - generate 8-bit textures: Texture2D::PixelFormat::A8 (only use it if you use just 1 color)<br>
--- How does it work ?<br>
--- - If the image is an RGBA (with Alpha) then the default pixel format will be used (it can be a 8-bit, 16-bit or 32-bit texture)<br>
--- - If the image is an RGB (without Alpha) then: If the default pixel format is RGBA8888 then a RGBA8888 (32-bit) will be used. Otherwise a RGB565 (16-bit texture) will be used.<br>
--- This parameter is not valid for PVR / PVR.CCZ images.<br>
--- since v0.8
---@param format int
---@return cc.Texture2D
function m:setDefaultAlphaPixelFormat(format) end

---  Returns the alpha pixel format.<br>
--- since v0.8
---@return int
function m:getDefaultAlphaPixelFormat() end

--- js ctor
---@return cc.Texture2D
function m:Texture2D() end



return m