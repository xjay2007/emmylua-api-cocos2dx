--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccs.ComAudio : ccs.Component,ccs.PlayableProtocol
local m = {}

--- 
---@return ccs.ComAudio
function m:stopAllEffects() end

--- 
---@return float
function m:getEffectsVolume() end

--- 
---@param nSoundId uint
---@return ccs.ComAudio
function m:stopEffect(nSoundId) end

--- 
---@return float
function m:getBackgroundMusicVolume() end

--- 
---@return boolean
function m:willPlayBackgroundMusic() end

--- 
---@param volume float
---@return ccs.ComAudio
function m:setBackgroundMusicVolume(volume) end

---@return ccs.ComAudio
function m:start() end

---@overload fun(self:ccs.ComAudio):ccs.ComAudio
---@param bReleaseData boolean
---@return ccs.ComAudio
function m:stopBackgroundMusic(bReleaseData) end

--- 
---@return ccs.ComAudio
function m:pauseBackgroundMusic() end

--- 
---@return boolean
function m:isBackgroundMusicPlaying() end

--- 
---@return boolean
function m:isLoop() end

--- 
---@return ccs.ComAudio
function m:resumeAllEffects() end

--- 
---@return ccs.ComAudio
function m:pauseAllEffects() end

--- 
---@param pszFilePath char
---@return ccs.ComAudio
function m:preloadBackgroundMusic(pszFilePath) end

---@overload fun(self:ccs.ComAudio, pszFilePath:char):ccs.ComAudio
---@overload fun(self:ccs.ComAudio):ccs.ComAudio
---@param pszFilePath char
---@param bLoop boolean
---@return ccs.ComAudio
function m:playBackgroundMusic(pszFilePath, bLoop) end

--- 
---@return ccs.ComAudio
function m:stop() end

--- lua endToLua
---@return ccs.ComAudio
function m:endToLua() end

---@overload fun(self:ccs.ComAudio, pszFilePath:char):uint
---@overload fun(self:ccs.ComAudio):uint
---@param pszFilePath char
---@param bLoop boolean
---@return uint
function m:playEffect(pszFilePath, bLoop) end

--- 
---@param pszFilePath char
---@return ccs.ComAudio
function m:preloadEffect(pszFilePath) end

--- 
---@param bLoop boolean
---@return ccs.ComAudio
function m:setLoop(bLoop) end

--- 
---@param pszFilePath char
---@return ccs.ComAudio
function m:unloadEffect(pszFilePath) end

--- 
---@return ccs.ComAudio
function m:rewindBackgroundMusic() end

--- 
---@param nSoundId uint
---@return ccs.ComAudio
function m:pauseEffect(nSoundId) end

--- 
---@return ccs.ComAudio
function m:resumeBackgroundMusic() end

--- 
---@param pszFilePath char
---@return ccs.ComAudio
function m:setFile(pszFilePath) end

--- 
---@param volume float
---@return ccs.ComAudio
function m:setEffectsVolume(volume) end

--- 
---@return char
function m:getFile() end

--- 
---@param nSoundId uint
---@return ccs.ComAudio
function m:resumeEffect(nSoundId) end

--- 
---@return ccs.ComAudio
function m:create() end

--- 
---@return cc.Ref
function m:createInstance() end

--- js NA<br>
--- lua NA
---@return ccs.ComAudio
function m:onRemove() end

--- 
---@param r void
---@return boolean
function m:serialize(r) end

--- 
---@return boolean
function m:init() end

--- js NA<br>
--- lua NA
---@return ccs.ComAudio
function m:onAdd() end



return m