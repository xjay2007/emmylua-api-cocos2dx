--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccui.PageView : ccui.ListView
local m = {}

--- brief Set space between page indicator's index nodes.<br>
--- param spaceBetweenIndexNodes Space between nodes in pixel.
---@param spaceBetweenIndexNodes float
---@return ccui.PageView
function m:setIndicatorSpaceBetweenIndexNodes(spaceBetweenIndexNodes) end

--- Insert a page into PageView at a given index.<br>
--- param page  Page to be inserted.<br>
--- param idx   A given index.
---@param page ccui.Widget
---@param idx int
---@return ccui.PageView
function m:insertPage(page, idx) end

--- brief Set opacity of page indicator's index nodes.<br>
--- param opacity New indicator node opacity.
---@param opacity uchar
---@return ccui.PageView
function m:setIndicatorIndexNodesOpacity(opacity) end

--- brief Set opacity of page indicator's selected index.<br>
--- param color New opacity for selected (current) index.
---@param opacity uchar
---@return ccui.PageView
function m:setIndicatorSelectedIndexOpacity(opacity) end

--- brief Remove all pages of the PageView.
---@return ccui.PageView
function m:removeAllPages() end

--- 
---@param epsilon float
---@return ccui.PageView
function m:setAutoScrollStopEpsilon(epsilon) end

--- brief Set scale of page indicator's index nodes.<br>
--- param indexNodesScale Scale of index nodes.
---@param indexNodesScale float
---@return ccui.PageView
function m:setIndicatorIndexNodesScale(indexNodesScale) end

--- brief Toggle page indicator enabled.<br>
--- param enabled True if enable page indicator, false otherwise.
---@param enabled boolean
---@return ccui.PageView
function m:setIndicatorEnabled(enabled) end

--- brief Set color of page indicator's selected index.<br>
--- param color New color for selected (current) index.
---@param color cc.c3b
---@return ccui.PageView
function m:setIndicatorSelectedIndexColor(color) end

--- brief Add a page turn callback to PageView, then when one page is turning, the callback will be called.<br>
--- param callback A page turning callback.
---@param callback fun
---@return ccui.PageView
function m:addEventListener(callback) end

--- brief Get the page indicator's position.<br>
--- return positionAsAnchorPoint
---@return cc.vec2
function m:getIndicatorPosition() end

--- Jump to a page with a given index without scrolling.<br>
--- This is the different between scrollToPage.<br>
--- param index A given index in PageView. Index start from 0 to pageCount -1.
---@param index int
---@return ccui.PageView
function m:setCurrentPageIndex(index) end

--- brief Get the color of page indicator's index nodes.<br>
--- return color
---@return cc.c3b
function m:getIndicatorIndexNodesColor() end

--- brief Get the color of page indicator's selected index.<br>
--- return color
---@return cc.c3b
function m:getIndicatorSelectedIndexColor() end

--- brief Get scale of page indicator's index nodes.<br>
--- return indexNodesScale
---@return float
function m:getIndicatorIndexNodesScale() end

--- brief Set the page indicator's position in page view.<br>
--- param position The position in page view
---@param position cc.vec2
---@return ccui.PageView
function m:setIndicatorPosition(position) end

--- brief Get the opacity of page indicator's selected index.<br>
--- return opacity
---@return uchar
function m:getIndicatorSelectedIndexOpacity() end

---@overload fun(self:ccui.PageView, idx:int):ccui.PageView
---@param idx int
---@param time float
---@return ccui.PageView
function m:scrollToPage(idx, time) end

--- brief Set the page indicator's position using anchor point.<br>
--- param positionAsAnchorPoint The position as anchor point.
---@param positionAsAnchorPoint cc.vec2
---@return ccui.PageView
function m:setIndicatorPositionAsAnchorPoint(positionAsAnchorPoint) end

---@overload fun(self:ccui.PageView, idx:int):ccui.PageView
---@param idx int
---@param time float
---@return ccui.PageView
function m:scrollToItem(idx, time) end

--- brief Set color of page indicator's index nodes.<br>
--- param color New indicator node color.
---@param color cc.c3b
---@return ccui.PageView
function m:setIndicatorIndexNodesColor(color) end

--- brief Get the opacity of page indicator's index nodes.<br>
--- return opacity
---@return uchar
function m:getIndicatorIndexNodesOpacity() end

--- brief Get the page indicator's position as anchor point.<br>
--- return positionAsAnchorPoint
---@return cc.vec2
function m:getIndicatorPositionAsAnchorPoint() end

--- Gets current displayed page index.<br>
--- return current page index.
---@return int
function m:getCurrentPageIndex() end

--- Remove a page of PageView.<br>
--- param page  Page to be removed.
---@param page ccui.Widget
---@return ccui.PageView
function m:removePage(page) end

--- sets texture for index nodes.<br>
--- param fileName   File name of texture.<br>
---@param texName string
---@param texType int
---@return ccui.PageView
function m:setIndicatorIndexNodesTexture(texName, texType) end

--- brief Query page indicator state.<br>
--- return True if page indicator is enabled, false otherwise.
---@return boolean
function m:getIndicatorEnabled() end

--- Remove a page at a given index of PageView.<br>
--- param index  A given index.
---@param index int
---@return ccui.PageView
function m:removePageAtIndex(index) end

--- brief Get the space between page indicator's index nodes.<br>
--- return spaceBetweenIndexNodes
---@return float
function m:getIndicatorSpaceBetweenIndexNodes() end

--- Insert a page into the end of PageView.<br>
--- param page Page to be inserted.
---@param page ccui.Widget
---@return ccui.PageView
function m:addPage(page) end

--- Create an empty PageView.<br>
--- return A PageView instance.
---@return ccui.PageView
function m:create() end

--- 
---@return cc.Ref
function m:createInstance() end

--- 
---@return ccui.PageView
function m:doLayout() end

--- 
---@return boolean
function m:init() end

--- 
---@return string
function m:getDescription() end

--- Changes direction<br>
--- Direction Direction::VERTICAL means vertical scroll, Direction::HORIZONTAL means horizontal scroll.<br>
--- param direction Set the page view's scroll direction.
---@param direction int
---@return ccui.PageView
function m:setDirection(direction) end

--- Default constructor<br>
--- js ctor<br>
--- lua new
---@return ccui.PageView
function m:PageView() end



return m