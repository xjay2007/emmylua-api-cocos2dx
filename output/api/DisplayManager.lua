--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccs.DisplayManager : ccs.Ref
local m = {}

--- 
---@return cc.Node
function m:getDisplayRenderNode() end

--- 
---@return cc.vec2
function m:getAnchorPointInPoints() end

--- 
---@return int
function m:getDisplayRenderNodeType() end

--- 
---@param index int
---@return ccs.DisplayManager
function m:removeDisplay(index) end

--- 
---@param force boolean
---@return ccs.DisplayManager
function m:setForceChangeDisplay(force) end

--- 
---@param bone ccs.Bone
---@return boolean
function m:init(bone) end

--- 
---@return cc.size
function m:getContentSize() end

--- 
---@return cc.rect
function m:getBoundingBox() end

---@overload fun(self:ccs.DisplayManager, displayData:cc.Node, index:int):ccs.DisplayManager
---@param displayData ccs.DisplayData
---@param index int
---@return ccs.DisplayManager
function m:addDisplay(displayData, index) end

---@overload fun(self:ccs.DisplayManager, x:cc.vec2):boolean
---@param x float
---@param y float
---@return boolean
function m:containPoint(x, y) end

--- Change display by index. You can just use this method to change display in the display list.<br>
--- The display list is just used for this bone, and it is the displays you may use in every frame.<br>
--- Note : if index is the same with prev index, the method will not effect<br>
--- param index The index of the display you want to change<br>
--- param force If true, then force change display to specified display, or current display will set to  display index edit in the flash every key frame.
---@param index int
---@param force boolean
---@return ccs.DisplayManager
function m:changeDisplayWithIndex(index, force) end

--- 
---@param name string
---@param force boolean
---@return ccs.DisplayManager
function m:changeDisplayWithName(name, force) end

--- 
---@return boolean
function m:isForceChangeDisplay() end

--- 
---@return int
function m:getCurrentDisplayIndex() end

--- 
---@return cc.vec2
function m:getAnchorPoint() end

--- 
---@return any[]
function m:getDecorativeDisplayList() end

--- Determines if the display is visible<br>
--- see setVisible(bool)<br>
--- return true if the node is visible, false if the node is hidden.
---@return boolean
function m:isVisible() end

--- Sets whether the display is visible<br>
--- The default value is true, a node is default to visible<br>
--- param visible   true if the node is visible, false if the node is hidden.
---@param visible boolean
---@return ccs.DisplayManager
function m:setVisible(visible) end

--- 
---@param bone ccs.Bone
---@return ccs.DisplayManager
function m:create(bone) end

--- 
---@return ccs.DisplayManager
function m:DisplayManager() end



return m