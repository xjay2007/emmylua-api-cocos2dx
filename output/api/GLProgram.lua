--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.GLProgram : cc.Ref
local m = {}

---  returns the fragmentShader error log 
---@return string
function m:getFragmentShaderLog() end

---@overload fun(self:cc.GLProgram, vShaderByteArray:char, fShaderByteArray:char, compileTimeHeaders:string):boolean
---@overload fun(self:cc.GLProgram, vShaderByteArray:char, fShaderByteArray:char):boolean
---@param vShaderByteArray char
---@param fShaderByteArray char
---@param compileTimeHeaders string
---@param compileTimeDefines string
---@return boolean
function m:initWithByteArrays(vShaderByteArray, fShaderByteArray, compileTimeHeaders, compileTimeDefines) end

---@overload fun(self:cc.GLProgram, vShaderFilename:string, fShaderFilename:string, compileTimeHeaders:string):boolean
---@overload fun(self:cc.GLProgram, vShaderFilename:string, fShaderFilename:string):boolean
---@param vShaderFilename string
---@param fShaderFilename string
---@param compileTimeHeaders string
---@param compileTimeDefines string
---@return boolean
function m:initWithFilenames(vShaderFilename, fShaderFilename, compileTimeHeaders, compileTimeDefines) end

---  it will call glUseProgram() 
---@return cc.GLProgram
function m:use() end

---  returns the vertexShader error log 
---@return string
function m:getVertexShaderLog() end

---@overload fun(self:cc.GLProgram):cc.GLProgram
---@param modelView mat4_table
---@return cc.GLProgram
function m:setUniformsForBuiltins(modelView) end

---  It will create 4 uniforms:<br>
--- - kUniformPMatrix<br>
--- - kUniformMVMatrix<br>
--- - kUniformMVPMatrix<br>
--- - GLProgram::UNIFORM_SAMPLER<br>
--- And it will bind "GLProgram::UNIFORM_SAMPLER" to 0
---@return cc.GLProgram
function m:updateUniforms() end

---  calls glUniform1i only if the values are different than the previous call for this same shader program.<br>
--- js setUniformLocationI32<br>
--- lua setUniformLocationI32
---@param location int
---@param i1 int
---@return cc.GLProgram
function m:setUniformLocationWith1i(location, i1) end

---  Reload all shaders, this function is designed for android<br>
--- when opengl context lost, so don't call it.
---@return cc.GLProgram
function m:reset() end

---   It will add a new attribute to the shader by calling glBindAttribLocation. 
---@param attributeName string
---@param index uint
---@return cc.GLProgram
function m:bindAttribLocation(attributeName, index) end

---  Calls glGetAttribLocation. 
---@param attributeName string
---@return int
function m:getAttribLocation(attributeName) end

---  links the glProgram 
---@return boolean
function m:link() end

---@overload fun(self:cc.GLProgram, vShaderByteArray:char, fShaderByteArray:char, compileTimeHeaders:string):cc.GLProgram
---@overload fun(self:cc.GLProgram, vShaderByteArray:char, fShaderByteArray:char):cc.GLProgram
---@param vShaderByteArray char
---@param fShaderByteArray char
---@param compileTimeHeaders string
---@param compileTimeDefines string
---@return cc.GLProgram
function m:createWithByteArrays(vShaderByteArray, fShaderByteArray, compileTimeHeaders, compileTimeDefines) end

---@overload fun(self:cc.GLProgram, vShaderFilename:string, fShaderFilename:string, compileTimeHeaders:string):cc.GLProgram
---@overload fun(self:cc.GLProgram, vShaderFilename:string, fShaderFilename:string):cc.GLProgram
---@param vShaderFilename string
---@param fShaderFilename string
---@param compileTimeHeaders string
---@param compileTimeDefines string
---@return cc.GLProgram
function m:createWithFilenames(vShaderFilename, fShaderFilename, compileTimeHeaders, compileTimeDefines) end

--- Constructor.
---@return cc.GLProgram
function m:GLProgram() end



return m