--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.MotionStreak3D : cc.Node,cc.TextureProtocol
local m = {}

---  Remove all living segments of the ribbon.
---@return cc.MotionStreak3D
function m:reset() end

--- 
---@param texture cc.Texture2D
---@return cc.MotionStreak3D
function m:setTexture(texture) end

--- 
---@return cc.Texture2D
function m:getTexture() end

---  Color used for the tint.<br>
--- param colors The color used for the tint.
---@param colors cc.c3b
---@return cc.MotionStreak3D
function m:tintWithColor(colors) end

--- Get the direction of sweeping line segment
---@return cc.vec3
function m:getSweepAxis() end

--- js NA<br>
--- lua NA
---@param blendFunc cc.BlendFunc
---@return cc.MotionStreak3D
function m:setBlendFunc(blendFunc) end

---  Sets the starting position initialized or not.<br>
--- param bStartingPositionInitialized True if initialized the starting position.
---@param bStartingPositionInitialized boolean
---@return cc.MotionStreak3D
function m:setStartingPositionInitialized(bStartingPositionInitialized) end

--- js NA<br>
--- lua NA
---@return cc.BlendFunc
function m:getBlendFunc() end

---  Is the starting position initialized or not.<br>
--- return True if the starting position is initialized.
---@return boolean
function m:isStartingPositionInitialized() end

---  Get stroke.<br>
--- return float stroke.
---@return float
function m:getStroke() end

---@overload fun(self:cc.MotionStreak3D, fade:float, minSeg:float, stroke:float, color:cc.c3b, path:cc.Texture2D):boolean
---@param fade float
---@param minSeg float
---@param stroke float
---@param color cc.c3b
---@param path string
---@return boolean
function m:initWithFade(fade, minSeg, stroke, color, path) end

--- Set the direction of sweeping line segment.<br>
--- param sweepAxis Direction of sweeping line segment
---@param sweepAxis cc.vec3
---@return cc.MotionStreak3D
function m:setSweepAxis(sweepAxis) end

---  Set stroke.<br>
--- param stroke The width of stroke.
---@param stroke float
---@return cc.MotionStreak3D
function m:setStroke(stroke) end

---@overload fun(self:cc.MotionStreak3D, fade:float, minSeg:float, stroke:float, color:cc.c3b, path:cc.Texture2D):cc.MotionStreak3D
---@param fade float
---@param minSeg float
---@param stroke float
---@param color cc.c3b
---@param path string
---@return cc.MotionStreak3D
function m:create(fade, minSeg, stroke, color, path) end

--- js NA<br>
--- lua NA
---@param renderer cc.Renderer
---@param transform mat4_table
---@param flags uint
---@return cc.MotionStreak3D
function m:draw(renderer, transform, flags) end

--- 
---@param value boolean
---@return cc.MotionStreak3D
function m:setOpacityModifyRGB(value) end

--- 
---@param y float
---@return cc.MotionStreak3D
function m:setPositionY(y) end

--- 
---@param rotation cc.vec3
---@return cc.MotionStreak3D
function m:setRotation3D(rotation) end

--- 
---@param x float
---@return cc.MotionStreak3D
function m:setPositionX(x) end

--- 
---@param position cc.vec3
---@return cc.MotionStreak3D
function m:setPosition3D(position) end

--- 
---@return float
function m:getPositionY() end

--- 
---@return float
function m:getPositionX() end

--- 
---@return cc.vec3
function m:getPosition3D() end

--- 
---@param opacity uchar
---@return cc.MotionStreak3D
function m:setOpacity(opacity) end

--- lua NA
---@param delta float
---@return cc.MotionStreak3D
function m:update(delta) end

--- 
---@param quat cc.Quaternion
---@return cc.MotionStreak3D
function m:setRotationQuat(quat) end

--- 
---@return uchar
function m:getOpacity() end

---@overload fun(self:cc.MotionStreak3D, x:cc.vec2):cc.MotionStreak3D
---@param x float
---@param y float
---@return cc.MotionStreak3D
function m:setPosition(x, y) end

---@overload fun(self:cc.MotionStreak3D):cc.MotionStreak3D
---@param x float
---@param y float
---@return cc.MotionStreak3D
function m:getPosition(x, y) end

--- 
---@return boolean
function m:isOpacityModifyRGB() end

--- 
---@return cc.MotionStreak3D
function m:MotionStreak3D() end



return m