--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.Label : cc.Node,cc.LabelProtocol,cc.BlendProtocol
local m = {}

--- 
---@return boolean
function m:isClipMarginEnabled() end

--- Enable shadow effect to Label.<br>
--- todo Support blur for shadow effect.
---@return cc.Label
function m:enableShadow() end

---  Sets the untransformed size of the Label in a more efficient way. 
---@param width float
---@param height float
---@return cc.Label
function m:setDimensions(width, height) end

--- 
---@return float
function m:getWidth() end

---  Return the text the Label is currently displaying.
---@return string
function m:getString() end

--- 
---@return float
function m:getHeight() end

---@overload fun(self:cc.Label):cc.Label
---@param effect int
---@return cc.Label
function m:disableEffect(effect) end

--- Sets a new TTF configuration to Label.<br>
--- see `TTFConfig`
---@param ttfConfig cc._ttfConfig
---@return boolean
function m:setTTFConfig(ttfConfig) end

---  Returns the text color of the Label.
---@return cc.c4b
function m:getTextColor() end

--- 
---@return cc.BlendFunc
function m:getBlendFunc() end

--- Toggle wrap option of the label.<br>
--- Note: System font doesn't support manually toggle wrap.<br>
--- param enable Set true to enable wrap and false to disable wrap.
---@param enable boolean
---@return cc.Label
function m:enableWrap(enable) end

--- Makes the Label exactly this untransformed width.<br>
--- The Label's width be used for text align if the value not equal zero.
---@param width float
---@return cc.Label
function m:setWidth(width) end

--- Returns the additional kerning of the Label.<br>
--- warning Not support system font.<br>
--- since v3.2.0
---@return float
function m:getAdditionalKerning() end

--- Return the user define BMFont size.<br>
--- return The BMFont size in float value.
---@return float
function m:getBMFontSize() end

--- 
---@return float
function m:getMaxLineWidth() end

---  Returns the Label's text horizontal alignment.
---@return int
function m:getHorizontalAlignment() end

--- Return shadow effect offset value.
---@return cc.size
function m:getShadowOffset() end

--- 
---@return float
function m:getLineSpacing() end

---  Clips upper and lower margin to reduce height of Label.
---@param clipEnabled boolean
---@return cc.Label
function m:setClipMarginEnabled(clipEnabled) end

---  Sets the text that this Label is to display.
---@param text string
---@return cc.Label
function m:setString(text) end

--- Sets a new system font to Label.<br>
--- param font A font file or a font family name.<br>
--- warning
---@param font string
---@return cc.Label
function m:setSystemFontName(font) end

--- Query the wrap is enabled or not.<br>
--- Note: System font will always return true.
---@return boolean
function m:isWrapEnabled() end

--- Return the outline effect size value.
---@return float
function m:getOutlineSize() end

---  Sets a new bitmap font to Label 
---@param bmfontFilePath string
---@param imageOffset cc.vec2
---@param fontSize float
---@return boolean
function m:setBMFontFilePath(bmfontFilePath, imageOffset, fontSize) end

---@overload fun(self:cc.Label, text:cc._ttfConfig, fontFilePath:string, fontSize:int, dimensions:int):boolean
---@param text string
---@param fontFilePath string
---@param fontSize float
---@param dimensions cc.size
---@param hAlignment int
---@param vAlignment int
---@return boolean
function m:initWithTTF(text, fontFilePath, fontSize, dimensions, hAlignment, vAlignment) end

--- 
---@return cc.FontAtlas
function m:getFontAtlas() end

---  Sets the line height of the Label.<br>
--- warning Not support system font.<br>
--- since v3.2.0
---@param height float
---@return cc.Label
function m:setLineHeight(height) end

--- 
---@param fontSize float
---@return cc.Label
function m:setSystemFontSize(fontSize) end

--- Change the label's Overflow type, currently only TTF and BMFont support all the valid Overflow type.<br>
--- Char Map font supports all the Overflow type except for SHRINK, because we can't measure it's font size.<br>
--- System font only support Overflow::Normal and Overflow::RESIZE_HEIGHT.<br>
--- param overflow   see `Overflow`
---@param overflow int
---@return cc.Label
function m:setOverflow(overflow) end

--- Enables strikethrough.<br>
--- Underline and Strikethrough cannot be enabled at the same time.<br>
--- Strikethrough is like an underline but at the middle of the glyph
---@return cc.Label
function m:enableStrikethrough() end

---  Update content immediately.
---@return cc.Label
function m:updateContent() end

--- Return length of string.
---@return int
function m:getStringLength() end

--- Specify what happens when a line is too long for Label.<br>
--- param breakWithoutSpace Lines are automatically broken between words if this value is false.
---@param breakWithoutSpace boolean
---@return cc.Label
function m:setLineBreakWithoutSpace(breakWithoutSpace) end

--- Return the number of lines of text.
---@return int
function m:getStringNumLines() end

--- Enable outline effect to Label.<br>
--- warning Limiting use to only when the Label created with true type font or system font.
---@param outlineColor cc.c4b
---@param outlineSize int
---@return cc.Label
function m:enableOutline(outlineColor, outlineSize) end

--- Return the shadow effect blur radius.
---@return float
function m:getShadowBlurRadius() end

--- Return current effect color value.
---@return cc.c4f
function m:getEffectColor() end

--- 
---@param cleanup boolean
---@return cc.Label
function m:removeAllChildrenWithCleanup(cleanup) end

---@overload fun(self:cc.Label, charMapFile:cc.Texture2D, itemWidth:int, itemHeight:int, startCharMap:int):boolean
---@overload fun(self:cc.Label, charMapFile:string):boolean
---@param charMapFile string
---@param itemWidth int
---@param itemHeight int
---@param startCharMap int
---@return boolean
function m:setCharMap(charMapFile, itemWidth, itemHeight, startCharMap) end

--- 
---@return cc.size
function m:getDimensions() end

--- Makes the Label at most this line untransformed width.<br>
--- The Label's max line width be used for force line breaks if the value not equal zero.
---@param maxLineWidth float
---@return cc.Label
function m:setMaxLineWidth(maxLineWidth) end

---  Returns the system font used by the Label.
---@return string
function m:getSystemFontName() end

---  Sets the Label's text vertical alignment.
---@param vAlignment int
---@return cc.Label
function m:setVerticalAlignment(vAlignment) end

--- 
---@param height float
---@return cc.Label
function m:setLineSpacing(height) end

--- Returns the line height of this Label.<br>
--- warning Not support system font.<br>
--- since v3.2.0
---@return float
function m:getLineHeight() end

--- Return the shadow effect color value.
---@return cc.c4f
function m:getShadowColor() end

--- Returns the TTF configuration object used by the Label.<br>
--- see `TTFConfig`
---@return cc._ttfConfig
function m:getTTFConfig() end

--- Enable italics rendering
---@return cc.Label
function m:enableItalics() end

--- Sets the text color of Label.<br>
--- The text color is different from the color of Node.<br>
--- warning Limiting use to only when the Label created with true type font or system font.
---@param color cc.c4b
---@return cc.Label
function m:setTextColor(color) end

--- Provides a way to treat each character like a Sprite.<br>
--- warning No support system font.
---@param lettetIndex int
---@return cc.Sprite
function m:getLetter(lettetIndex) end

--- Makes the Label exactly this untransformed height.<br>
--- The Label's height be used for text align if the value not equal zero.<br>
--- The text will display incomplete if the size of Label is not large enough to display all text.
---@param height float
---@return cc.Label
function m:setHeight(height) end

--- Return whether the shadow effect is enabled.
---@return boolean
function m:isShadowEnabled() end

--- Enable glow effect to Label.<br>
--- warning Limiting use to only when the Label created with true type font.
---@param glowColor cc.c4b
---@return cc.Label
function m:enableGlow(glowColor) end

--- Query the label's Overflow type.<br>
--- return see `Overflow`
---@return int
function m:getOverflow() end

---  Returns the Label's text vertical alignment.
---@return int
function m:getVerticalAlignment() end

--- Sets the additional kerning of the Label.<br>
--- warning Not support system font.<br>
--- since v3.2.0
---@param space float
---@return cc.Label
function m:setAdditionalKerning(space) end

---  Returns the bitmap font path used by the Label.
---@return float
function m:getSystemFontSize() end

--- 
---@param blendFunc cc.BlendFunc
---@return cc.Label
function m:setBlendFunc(blendFunc) end

---  Returns the Label's text horizontal alignment.
---@return int
function m:getTextAlignment() end

---  Returns the bitmap font used by the Label.
---@return string
function m:getBMFontFilePath() end

---  Sets the Label's text horizontal alignment.
---@param hAlignment int
---@return cc.Label
function m:setHorizontalAlignment(hAlignment) end

--- Enable bold rendering
---@return cc.Label
function m:enableBold() end

--- Enable underline
---@return cc.Label
function m:enableUnderline() end

--- Return current effect type.
---@return int
function m:getLabelEffectType() end

---@overload fun(self:cc.Label, hAlignment:int):cc.Label
---@param hAlignment int
---@param vAlignment int
---@return cc.Label
function m:setAlignment(hAlignment, vAlignment) end

--- warning This method is not recommended for game developers.
---@return cc.Label
function m:requestSystemFontRefresh() end

--- Change font size of label type BMFONT<br>
--- Note: This function only scale the BMFONT letter to mimic the font size change effect.<br>
--- param fontSize The desired font size in float.
---@param fontSize float
---@return cc.Label
function m:setBMFontSize(fontSize) end

--- Allocates and initializes a Label, with a bitmap font file.<br>
--- param bmfontPath A bitmap font file, it's a FNT format.<br>
--- param text The initial text.<br>
--- param hAlignment Text horizontal alignment.<br>
--- param maxLineWidth The max line width.<br>
--- param imageOffset<br>
--- return An automatically released Label object.<br>
--- see setBMFontFilePath setMaxLineWidth
---@param bmfontPath string
---@param text string
---@param hAlignment int
---@param maxLineWidth int
---@param imageOffset cc.vec2
---@return cc.Label
function m:createWithBMFont(bmfontPath, text, hAlignment, maxLineWidth, imageOffset) end

--- Allocates and initializes a Label, with default settings.<br>
--- return An automatically released Label object.
---@return cc.Label
function m:create() end

---@overload fun(self:cc.Label, charMapFile:cc.Texture2D, itemWidth:int, itemHeight:int, startCharMap:int):cc.Label
---@overload fun(self:cc.Label, charMapFile:string):cc.Label
---@param charMapFile string
---@param itemWidth int
---@param itemHeight int
---@param startCharMap int
---@return cc.Label
function m:createWithCharMap(charMapFile, itemWidth, itemHeight, startCharMap) end

--- Allocates and initializes a Label, base on platform-dependent API.<br>
--- param text The initial text.<br>
--- param font A font file or a font family name.<br>
--- param fontSize The font size. This value must be > 0.<br>
--- param dimensions<br>
--- param hAlignment The text horizontal alignment.<br>
--- param vAlignment The text vertical alignment.<br>
--- warning It will generate texture by the platform-dependent code.<br>
--- return An automatically released Label object.
---@param text string
---@param font string
---@param fontSize float
---@param dimensions cc.size
---@param hAlignment int
---@param vAlignment int
---@return cc.Label
function m:createWithSystemFont(text, font, fontSize, dimensions, hAlignment, vAlignment) end

--- 
---@param renderer cc.Renderer
---@param transform mat4_table
---@param flags uint
---@return cc.Label
function m:draw(renderer, transform, flags) end

--- 
---@return boolean
function m:isOpacityModifyRGB() end

--- 
---@param mask ushort
---@param applyChildren boolean
---@return cc.Label
function m:setCameraMask(mask, applyChildren) end

--- 
---@param child cc.Node
---@param cleanup boolean
---@return cc.Label
function m:removeChild(child, cleanup) end

--- 
---@param renderer cc.Renderer
---@param parentTransform mat4_table
---@param parentFlags uint
---@return cc.Label
function m:visit(renderer, parentTransform, parentFlags) end

--- 
---@return string
function m:getDescription() end

--- 
---@param isOpacityModifyRGB boolean
---@return cc.Label
function m:setOpacityModifyRGB(isOpacityModifyRGB) end

--- 
---@param parentOpacity uchar
---@return cc.Label
function m:updateDisplayedOpacity(parentOpacity) end

--- 
---@return cc.size
function m:getContentSize() end

--- 
---@return cc.rect
function m:getBoundingBox() end

--- 
---@param parentColor cc.c3b
---@return cc.Label
function m:updateDisplayedColor(parentColor) end

--- 
---@param globalZOrder float
---@return cc.Label
function m:setGlobalZOrder(globalZOrder) end



return m