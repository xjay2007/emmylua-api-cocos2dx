--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.NavMeshAgent : cc.Component
local m = {}

---  set maximal speed of agent 
---@param maxSpeed float
---@return cc.NavMeshAgent
function m:setMaxSpeed(maxSpeed) end

---  synchronize parameter to node. 
---@return cc.NavMeshAgent
function m:syncToNode() end

--- Traverse OffMeshLink manually
---@return cc.NavMeshAgent
function m:completeOffMeshLink() end

---  get separation weight 
---@return float
function m:getSeparationWeight() end

--- Set automatic Traverse OffMeshLink 
---@param isAuto boolean
---@return cc.NavMeshAgent
function m:setAutoTraverseOffMeshLink(isAuto) end

---  get current velocity 
---@return cc.vec3
function m:getCurrentVelocity() end

---  synchronize parameter to agent. 
---@return cc.NavMeshAgent
function m:syncToAgent() end

--- Check agent arrived OffMeshLink 
---@return boolean
function m:isOnOffMeshLink() end

---  set separation weight 
---@param weight float
---@return cc.NavMeshAgent
function m:setSeparationWeight(weight) end

---  pause movement 
---@return cc.NavMeshAgent
function m:pause() end

--- 
---@return void
function m:getUserData() end

--- Set automatic Orientation 
---@param isAuto boolean
---@return cc.NavMeshAgent
function m:setAutoOrientation(isAuto) end

---  get agent height 
---@return float
function m:getHeight() end

---  get maximal speed of agent 
---@return float
function m:getMaxSpeed() end

--- Get current OffMeshLink information
---@return cc.OffMeshLinkData
function m:getCurrentOffMeshLinkData() end

---  get agent radius 
---@return float
function m:getRadius() end

--- synchronization between node and agent is time consuming, you can skip some synchronization using this function
---@param flag int
---@return cc.NavMeshAgent
function m:setSyncFlag(flag) end

--- 
---@return int
function m:getSyncFlag() end

---  resume movement 
---@return cc.NavMeshAgent
function m:resume() end

---  stop movement 
---@return cc.NavMeshAgent
function m:stop() end

---  set maximal acceleration of agent
---@param maxAcceleration float
---@return cc.NavMeshAgent
function m:setMaxAcceleration(maxAcceleration) end

--- Set the reference axes of agent's orientation<br>
--- param rotRefAxes The value of reference axes in local coordinate system.
---@param rotRefAxes cc.vec3
---@return cc.NavMeshAgent
function m:setOrientationRefAxes(rotRefAxes) end

---  get maximal acceleration of agent
---@return float
function m:getMaxAcceleration() end

---  set agent height 
---@param height float
---@return cc.NavMeshAgent
function m:setHeight(height) end

--- 
---@param data void
---@return cc.NavMeshAgent
function m:setUserData(data) end

---  get obstacle avoidance type 
---@return uchar
function m:getObstacleAvoidanceType() end

---  get current velocity 
---@return cc.vec3
function m:getVelocity() end

---  set agent radius 
---@param radius float
---@return cc.NavMeshAgent
function m:setRadius(radius) end

---  set obstacle avoidance type 
---@param type uchar
---@return cc.NavMeshAgent
function m:setObstacleAvoidanceType(type) end

--- 
---@return string
function m:getNavMeshAgentComponentName() end

--- Create agent<br>
--- param param The parameters of agent.
---@param param cc.NavMeshAgentParam
---@return cc.NavMeshAgent
function m:create(param) end

--- 
---@return cc.NavMeshAgent
function m:onEnter() end

--- 
---@return cc.NavMeshAgent
function m:onExit() end

--- 
---@return cc.NavMeshAgent
function m:NavMeshAgent() end



return m