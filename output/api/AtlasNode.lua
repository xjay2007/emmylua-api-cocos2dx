--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.AtlasNode : cc.Node,cc.TextureProtocol
local m = {}

---  updates the Atlas (indexed vertex array).<br>
--- Shall be overridden in subclasses.
---@return cc.AtlasNode
function m:updateAtlasValues() end

---  Initializes an AtlasNode  with an Atlas file the width and height of each item and the quantity of items to render
---@param tile string
---@param tileWidth int
---@param tileHeight int
---@param itemsToRender int
---@return boolean
function m:initWithTileFile(tile, tileWidth, tileHeight, itemsToRender) end

--- 
---@return cc.Texture2D
function m:getTexture() end

---  Set an buffer manager of the texture vertex. 
---@param textureAtlas cc.TextureAtlas
---@return cc.AtlasNode
function m:setTextureAtlas(textureAtlas) end

--- code<br>
--- When this function bound into js or lua,the parameter will be changed<br>
--- In js: var setBlendFunc(var src, var dst)<br>
--- endcode<br>
--- lua NA
---@param blendFunc cc.BlendFunc
---@return cc.AtlasNode
function m:setBlendFunc(blendFunc) end

---  Return the buffer manager of the texture vertex. <br>
--- return Return A TextureAtlas.
---@return cc.TextureAtlas
function m:getTextureAtlas() end

--- lua NA
---@return cc.BlendFunc
function m:getBlendFunc() end

--- 
---@return int
function m:getQuadsToDraw() end

--- 
---@param texture cc.Texture2D
---@return cc.AtlasNode
function m:setTexture(texture) end

---  Initializes an AtlasNode  with a texture the width and height of each item measured in points and the quantity of items to render
---@param texture cc.Texture2D
---@param tileWidth int
---@param tileHeight int
---@param itemsToRender int
---@return boolean
function m:initWithTexture(texture, tileWidth, tileHeight, itemsToRender) end

--- 
---@param quadsToDraw int
---@return cc.AtlasNode
function m:setQuadsToDraw(quadsToDraw) end

---  creates a AtlasNode  with an Atlas file the width and height of each item and the quantity of items to render.<br>
--- param filename The path of Atlas file.<br>
--- param tileWidth The width of the item.<br>
--- param tileHeight The height of the item.<br>
--- param itemsToRender The quantity of items to render.
---@param filename string
---@param tileWidth int
---@param tileHeight int
---@param itemsToRender int
---@return cc.AtlasNode
function m:create(filename, tileWidth, tileHeight, itemsToRender) end

--- 
---@param renderer cc.Renderer
---@param transform mat4_table
---@param flags uint
---@return cc.AtlasNode
function m:draw(renderer, transform, flags) end

--- 
---@return boolean
function m:isOpacityModifyRGB() end

--- 
---@param color cc.c3b
---@return cc.AtlasNode
function m:setColor(color) end

--- 
---@return cc.c3b
function m:getColor() end

--- 
---@param isOpacityModifyRGB boolean
---@return cc.AtlasNode
function m:setOpacityModifyRGB(isOpacityModifyRGB) end

--- 
---@param opacity uchar
---@return cc.AtlasNode
function m:setOpacity(opacity) end

--- 
---@return cc.AtlasNode
function m:AtlasNode() end



return m