--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.ProtectedNode : cc.Node
local m = {}

---@overload fun(self:cc.ProtectedNode, child:cc.Node, localZOrder:int):cc.ProtectedNode
---@overload fun(self:cc.ProtectedNode, child:cc.Node):cc.ProtectedNode
---@param child cc.Node
---@param localZOrder int
---@param tag int
---@return cc.ProtectedNode
function m:addProtectedChild(child, localZOrder, tag) end

--- 
---@return cc.ProtectedNode
function m:disableCascadeColor() end

--- Removes a child from the container by tag value. It will also cleanup all running actions depending on the cleanup parameter.<br>
--- param tag       An integer number that identifies a child node.<br>
--- param cleanup   true if all running actions and callbacks on the child node will be cleanup, false otherwise.
---@param tag int
---@param cleanup boolean
---@return cc.ProtectedNode
function m:removeProtectedChildByTag(tag, cleanup) end

--- Reorders a child according to a new z value.<br>
--- param child     An already added child node. It MUST be already added.<br>
--- param localZOrder Z order for drawing priority. Please refer to setLocalZOrder(int)
---@param child cc.Node
---@param localZOrder int
---@return cc.ProtectedNode
function m:reorderProtectedChild(child, localZOrder) end

--- Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.<br>
--- param cleanup   true if all running actions on all children nodes should be cleanup, false otherwise.<br>
--- js removeAllChildren<br>
--- lua removeAllChildren
---@param cleanup boolean
---@return cc.ProtectedNode
function m:removeAllProtectedChildrenWithCleanup(cleanup) end

--- 
---@return cc.ProtectedNode
function m:disableCascadeOpacity() end

--- Sorts the children array once before drawing, instead of every time when a child is added or reordered.<br>
--- This approach can improves the performance massively.<br>
--- note Don't call this manually unless a child added needs to be removed in the same frame
---@return cc.ProtectedNode
function m:sortAllProtectedChildren() end

--- Gets a child from the container with its tag.<br>
--- param tag   An identifier to find the child node.<br>
--- return a Node object whose tag equals to the input parameter.
---@param tag int
---@return cc.Node
function m:getProtectedChildByTag(tag) end

--- Removes a child from the container. It will also cleanup all running actions depending on the cleanup parameter.<br>
--- param child     The child node which will be removed.<br>
--- param cleanup   true if all running actions and callbacks on the child node will be cleanup, false otherwise.
---@param child cc.Node
---@param cleanup boolean
---@return cc.ProtectedNode
function m:removeProtectedChild(child, cleanup) end

--- Removes all children from the container with a cleanup.<br>
--- see `removeAllChildrenWithCleanup(bool)`.
---@return cc.ProtectedNode
function m:removeAllProtectedChildren() end

--- Creates a ProtectedNode with no argument.<br>
--- return A instance of ProtectedNode.
---@return cc.ProtectedNode
function m:create() end

--- 
---@param mask ushort
---@param applyChildren boolean
---@return cc.ProtectedNode
function m:setCameraMask(mask, applyChildren) end

--- 
---@param globalZOrder float
---@return cc.ProtectedNode
function m:setGlobalZOrder(globalZOrder) end

--- js NA
---@param renderer cc.Renderer
---@param parentTransform mat4_table
---@param parentFlags uint
---@return cc.ProtectedNode
function m:visit(renderer, parentTransform, parentFlags) end

--- 
---@param parentOpacity uchar
---@return cc.ProtectedNode
function m:updateDisplayedOpacity(parentOpacity) end

--- 
---@param parentColor cc.c3b
---@return cc.ProtectedNode
function m:updateDisplayedColor(parentColor) end

--- 
---@return cc.ProtectedNode
function m:cleanup() end

--- 
---@return cc.ProtectedNode
function m:ProtectedNode() end



return m