--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.PUParticleSystem3D : cc.ParticleSystem3D
local m = {}

--- 
---@param filePath string
---@return boolean
function m:initWithFilePath(filePath) end

--- Returns the velocity scale, defined in the particle system, but passed to the technique for convenience.
---@return float
function m:getParticleSystemScaleVelocity() end

--- 
---@param quota uint
---@return cc.PUParticleSystem3D
function m:setEmittedSystemQuota(quota) end

--- default particle depth
---@return float
function m:getDefaultDepth() end

--- 
---@return uint
function m:getEmittedSystemQuota() end

--- 
---@param filePath string
---@param materialPath string
---@return boolean
function m:initWithFilePathAndMaterialPath(filePath, materialPath) end

--- 
---@return cc.PUParticleSystem3D
function m:clearAllParticles() end

--- 
---@return string
function m:getMaterialName() end

--- 
---@return cc.PUParticleSystem3D
function m:calulateRotationOffset() end

--- Return the maximum velocity a particle can have, even if the velocity of the particle has been set higher (either by initialisation of the particle or by means of an affector).
---@return float
function m:getMaxVelocity() end

--- 
---@param delta float
---@return cc.PUParticleSystem3D
function m:forceUpdate(delta) end

--- 
---@return float
function m:getTimeElapsedSinceStart() end

--- 
---@return cc.PUParticleSystem3D
function m:removeAllBehaviourTemplate() end

--- 
---@return uint
function m:getEmittedEmitterQuota() end

---  Forces emission of particles.<br>
--- remarks The number of requested particles are the exact number that are emitted. No down-scaling is applied.
---@param emitter cc.PUEmitter
---@param requested uint
---@return cc.PUParticleSystem3D
function m:forceEmission(emitter, requested) end

--- 
---@param listener cc.PUListener
---@return cc.PUParticleSystem3D
function m:addListener(listener) end

--- 
---@return boolean
function m:isMarkedForEmission() end

--- default particle width
---@return float
function m:getDefaultWidth() end

--- 
---@param quota uint
---@return cc.PUParticleSystem3D
function m:setEmittedEmitterQuota(quota) end

--- 
---@param isMarked boolean
---@return cc.PUParticleSystem3D
function m:setMarkedForEmission(isMarked) end

--- 
---@return cc.PUParticleSystem3D
function m:clone() end

--- add particle affector
---@param emitter cc.PUEmitter
---@return cc.PUParticleSystem3D
function m:addEmitter(emitter) end

--- 
---@param behaviour cc.PUBehaviour
---@return cc.PUParticleSystem3D
function m:addBehaviourTemplate(behaviour) end

--- 
---@param width float
---@return cc.PUParticleSystem3D
function m:setDefaultWidth(width) end

--- 
---@param system cc.PUParticleSystem3D
---@return cc.PUParticleSystem3D
function m:copyAttributesTo(system) end

--- 
---@param name string
---@return cc.PUParticleSystem3D
function m:setMaterialName(name) end

--- 
---@return cc.PUParticleSystem3D
function m:getParentParticleSystem() end

--- 
---@param listener cc.PUListener
---@return cc.PUParticleSystem3D
function m:removeListener(listener) end

--- Set the maximum velocity a particle can have.
---@param maxVelocity float
---@return cc.PUParticleSystem3D
function m:setMaxVelocity(maxVelocity) end

--- default particle height
---@return float
function m:getDefaultHeight() end

--- 
---@return cc.vec3
function m:getDerivedPosition() end

--- If the orientation of the particle system has been changed since the last update, the passed vector is rotated accordingly.
---@param pos cc.vec3
---@return cc.PUParticleSystem3D
function m:rotationOffset(pos) end

--- 
---@return cc.PUParticleSystem3D
function m:removeAllEmitter() end

--- 
---@param scaleVelocity float
---@return cc.PUParticleSystem3D
function m:setParticleSystemScaleVelocity(scaleVelocity) end

--- 
---@return cc.vec3
function m:getDerivedScale() end

--- 
---@param height float
---@return cc.PUParticleSystem3D
function m:setDefaultHeight(height) end

--- 
---@return cc.PUParticleSystem3D
function m:removeAllListener() end

--- 
---@param filePath string
---@return boolean
function m:initSystem(filePath) end

--- 
---@param particle cc.PUParticle3D
---@return boolean
function m:makeParticleLocal(particle) end

--- 
---@return cc.PUParticleSystem3D
function m:removerAllObserver() end

--- 
---@param depth float
---@return cc.PUParticleSystem3D
function m:setDefaultDepth(depth) end

--- 
---@param observer cc.PUObserver
---@return cc.PUParticleSystem3D
function m:addObserver(observer) end

---@overload fun(self:cc.PUParticleSystem3D, filePath:string):cc.PUParticleSystem3D
---@overload fun(self:cc.PUParticleSystem3D):cc.PUParticleSystem3D
---@param filePath string
---@param materialPath string
---@return cc.PUParticleSystem3D
function m:create(filePath, materialPath) end

--- 
---@param renderer cc.Renderer
---@param transform mat4_table
---@param flags uint
---@return cc.PUParticleSystem3D
function m:draw(renderer, transform, flags) end

--- particle system play control
---@return cc.PUParticleSystem3D
function m:startParticleSystem() end

--- stop particle
---@return cc.PUParticleSystem3D
function m:stopParticleSystem() end

--- 
---@param delta float
---@return cc.PUParticleSystem3D
function m:update(delta) end

--- pause particle
---@return cc.PUParticleSystem3D
function m:pauseParticleSystem() end

--- resume particle
---@return cc.PUParticleSystem3D
function m:resumeParticleSystem() end

--- 
---@return int
function m:getAliveParticleCount() end

--- 
---@return cc.PUParticleSystem3D
function m:PUParticleSystem3D() end



return m