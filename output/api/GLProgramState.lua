--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.GLProgramState : cc.Ref
local m = {}

---  Get the flag of vertex attribs used by OR operation.
---@return uint
function m:getVertexAttribsFlags() end

---@overload fun(self:cc.GLProgramState, uniformName:int, value:vec4_table):cc.GLProgramState
---@param uniformName string
---@param value vec4_table
---@return cc.GLProgramState
function m:setUniformVec4(uniformName, value) end

--- Applies the specified custom auto-binding.<br>
--- param uniformName Name of the shader uniform.<br>
--- param autoBinding Name of the auto binding.
---@param uniformName string
---@param autoBinding string
---@return cc.GLProgramState
function m:applyAutoBinding(uniformName, autoBinding) end

---@overload fun(self:cc.GLProgramState, uniformName:int, value:cc.vec2):cc.GLProgramState
---@param uniformName string
---@param value cc.vec2
---@return cc.GLProgramState
function m:setUniformVec2(uniformName, value) end

---@overload fun(self:cc.GLProgramState, uniformName:int, value:cc.vec3):cc.GLProgramState
---@param uniformName string
---@param value cc.vec3
---@return cc.GLProgramState
function m:setUniformVec3(uniformName, value) end

--- Apply GLProgram, attributes and uniforms.<br>
--- param modelView The applied modelView matrix to shader.
---@param modelView mat4_table
---@return cc.GLProgramState
function m:apply(modelView) end

--- Returns the Node bound to the GLProgramState
---@return cc.Node
function m:getNodeBinding() end

---@overload fun(self:cc.GLProgramState, uniformName:int, size:int, pointer:vec4_table):cc.GLProgramState
---@param uniformName string
---@param size int
---@param pointer vec4_table
---@return cc.GLProgramState
function m:setUniformVec4v(uniformName, size, pointer) end

--- Apply GLProgram, and built in uniforms.<br>
--- param modelView The applied modelView matrix to shader.
---@param modelView mat4_table
---@return cc.GLProgramState
function m:applyGLProgram(modelView) end

--- Sets the node that this render state is bound to.<br>
--- The specified node is used to apply auto-bindings for the render state.<br>
--- This is typically set to the node of the model that a material is<br>
--- applied to.<br>
--- param node The node to use for applying auto-bindings.
---@param node cc.Node
---@return cc.GLProgramState
function m:setNodeBinding(node) end

---@overload fun(self:cc.GLProgramState, uniformName:int, value:int):cc.GLProgramState
---@param uniformName string
---@param value int
---@return cc.GLProgramState
function m:setUniformInt(uniformName, value) end

--- Sets a uniform auto-binding.<br>
--- This method parses the passed in autoBinding string and attempts to convert it<br>
--- to an enumeration value. If it matches to one of the predefined strings, it will create a<br>
--- callback to get the correct value at runtime.<br>
--- param uniformName The name of the material parameter to store an auto-binding for.<br>
--- param autoBinding A string matching one of the built-in AutoBinding enum constants.
---@param uniformName string
---@param autoBinding string
---@return cc.GLProgramState
function m:setParameterAutoBinding(uniformName, autoBinding) end

---@overload fun(self:cc.GLProgramState, uniformName:int, size:int, pointer:cc.vec2):cc.GLProgramState
---@param uniformName string
---@param size int
---@param pointer cc.vec2
---@return cc.GLProgramState
function m:setUniformVec2v(uniformName, size, pointer) end

--- Get the number of user defined uniform count.
---@return int
function m:getUniformCount() end

--- Apply attributes.<br>
--- param applyAttribFlags Call GL::enableVertexAttribs(_vertexAttribsFlags) or not.
---@return cc.GLProgramState
function m:applyAttributes() end

---  Returns a new copy of the GLProgramState. The GLProgram is reused 
---@return cc.GLProgramState
function m:clone() end

--- Setter and Getter of the owner GLProgram binded in this program state.
---@param glprogram cc.GLProgram
---@return cc.GLProgramState
function m:setGLProgram(glprogram) end

---@overload fun(self:cc.GLProgramState, uniformName:int, size:int, pointer:float):cc.GLProgramState
---@param uniformName string
---@param size int
---@param pointer float
---@return cc.GLProgramState
function m:setUniformFloatv(uniformName, size, pointer) end

--- 
---@return cc.GLProgram
function m:getGLProgram() end

---@overload fun(self:cc.GLProgramState, uniformName:int, texture:cc.Texture2D):cc.GLProgramState
---@param uniformName string
---@param texture cc.Texture2D
---@return cc.GLProgramState
function m:setUniformTexture(uniformName, texture) end

--- Apply user defined uniforms.
---@return cc.GLProgramState
function m:applyUniforms() end

---@overload fun(self:cc.GLProgramState, uniformName:int, value:float):cc.GLProgramState
---@param uniformName string
---@param value float
---@return cc.GLProgramState
function m:setUniformFloat(uniformName, value) end

---@overload fun(self:cc.GLProgramState, uniformName:int, value:mat4_table):cc.GLProgramState
---@param uniformName string
---@param value mat4_table
---@return cc.GLProgramState
function m:setUniformMat4(uniformName, value) end

---@overload fun(self:cc.GLProgramState, uniformName:int, size:int, pointer:cc.vec3):cc.GLProgramState
---@param uniformName string
---@param size int
---@param pointer cc.vec3
---@return cc.GLProgramState
function m:setUniformVec3v(uniformName, size, pointer) end

--- Get the number of vertex attributes.
---@return int
function m:getVertexAttribCount() end

---  returns a new instance of GLProgramState for a given GLProgram 
---@param glprogram cc.GLProgram
---@return cc.GLProgramState
function m:create(glprogram) end

---@overload fun(self:cc.GLProgramState, glProgramName:string):cc.GLProgramState
---@param glProgramName string
---@param texture cc.Texture2D
---@return cc.GLProgramState
function m:getOrCreateWithGLProgramName(glProgramName, texture) end

---  gets-or-creates an instance of GLProgramState for a given GLProgram 
---@param glprogram cc.GLProgram
---@return cc.GLProgramState
function m:getOrCreateWithGLProgram(glprogram) end

---  gets-or-creates an instance of GLProgramState for given shaders 
---@param vertexShader string
---@param fragShader string
---@param compileTimeDefines string
---@return cc.GLProgramState
function m:getOrCreateWithShaders(vertexShader, fragShader, compileTimeDefines) end



return m