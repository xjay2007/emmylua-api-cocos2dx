--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.Physics3D6DofConstraint : cc.Physics3DConstraint
local m = {}

--- set linear lower limit
---@param linearLower cc.vec3
---@return cc.Physics3D6DofConstraint
function m:setLinearLowerLimit(linearLower) end

--- get linear lower limit
---@return cc.vec3
function m:getLinearLowerLimit() end

--- get angular upper limit
---@return cc.vec3
function m:getAngularUpperLimit() end

---  access for UseFrameOffset
---@return boolean
function m:getUseFrameOffset() end

--- get linear upper limit
---@return cc.vec3
function m:getLinearUpperLimit() end

--- set angular lower limit
---@param angularLower cc.vec3
---@return cc.Physics3D6DofConstraint
function m:setAngularLowerLimit(angularLower) end

--- is limited?<br>
--- param limitIndex first 3 are linear, next 3 are angular
---@param limitIndex int
---@return boolean
function m:isLimited(limitIndex) end

--- set use frame offset
---@param frameOffsetOnOff boolean
---@return cc.Physics3D6DofConstraint
function m:setUseFrameOffset(frameOffsetOnOff) end

--- set linear upper limit
---@param linearUpper cc.vec3
---@return cc.Physics3D6DofConstraint
function m:setLinearUpperLimit(linearUpper) end

--- get angular lower limit
---@return cc.vec3
function m:getAngularLowerLimit() end

--- set angular upper limit
---@param angularUpper cc.vec3
---@return cc.Physics3D6DofConstraint
function m:setAngularUpperLimit(angularUpper) end

---@overload fun(self:cc.Physics3D6DofConstraint, rbA:cc.Physics3DRigidBody, rbB:mat4_table, frameInA:boolean):cc.Physics3D6DofConstraint
---@param rbA cc.Physics3DRigidBody
---@param rbB cc.Physics3DRigidBody
---@param frameInA mat4_table
---@param frameInB mat4_table
---@param useLinearReferenceFrameA boolean
---@return cc.Physics3D6DofConstraint
function m:create(rbA, rbB, frameInA, frameInB, useLinearReferenceFrameA) end

--- 
---@return cc.Physics3D6DofConstraint
function m:Physics3D6DofConstraint() end



return m