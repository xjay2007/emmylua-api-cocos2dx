--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccs.ActionObject : ccs.Ref
local m = {}

--- Sets the current time of frame.<br>
--- param fTime   the current time of frame
---@param fTime float
---@return ccs.ActionObject
function m:setCurrentTime(fTime) end

--- Pause the action.
---@return ccs.ActionObject
function m:pause() end

--- Sets name for object<br>
--- param name    name of object
---@param name char
---@return ccs.ActionObject
function m:setName(name) end

--- Sets the time interval of frame.<br>
--- param fTime   the time interval of frame
---@param fTime float
---@return ccs.ActionObject
function m:setUnitTime(fTime) end

--- Gets the total time of frame.<br>
--- return the total time of frame
---@return float
function m:getTotalTime() end

--- Gets name of object<br>
--- return name of object
---@return char
function m:getName() end

--- Stop the action.
---@return ccs.ActionObject
function m:stop() end

---@overload fun(self:ccs.ActionObject):ccs.ActionObject
---@param func cc.CallFunc
---@return ccs.ActionObject
function m:play(func) end

--- Gets the current time of frame.<br>
--- return the current time of frame
---@return float
function m:getCurrentTime() end

--- Removes a ActionNode which play the action.<br>
--- param node    the ActionNode which play the action
---@param node ccs.ActionNode
---@return ccs.ActionObject
function m:removeActionNode(node) end

--- Gets if the action will loop play.<br>
--- return   that if the action will loop play
---@return boolean
function m:getLoop() end

--- Adds a ActionNode to play the action.<br>
--- param node    the ActionNode which will play the action
---@param node ccs.ActionNode
---@return ccs.ActionObject
function m:addActionNode(node) end

--- Gets the time interval of frame.<br>
--- return the time interval of frame
---@return float
function m:getUnitTime() end

--- Return if the action is playing.<br>
--- return true if the action is playing, false the otherwise
---@return boolean
function m:isPlaying() end

--- 
---@param fTime float
---@return ccs.ActionObject
function m:updateToFrameByTime(fTime) end

--- Sets if the action will loop play.<br>
--- param bLoop     that if the action will loop play
---@param bLoop boolean
---@return ccs.ActionObject
function m:setLoop(bLoop) end

--- 
---@param dt float
---@return ccs.ActionObject
function m:simulationActionUpdate(dt) end

--- Default constructor
---@return ccs.ActionObject
function m:ActionObject() end



return m