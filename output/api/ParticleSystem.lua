--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.ParticleSystem : cc.Node,cc.TextureProtocol,cc.PlayableProtocol
local m = {}

---  Gets the start size variance in pixels of each particle.<br>
--- return The start size variance in pixels of each particle.
---@return float
function m:getStartSizeVar() end

--- 
---@return cc.Texture2D
function m:getTexture() end

---  Whether or not the system is full.<br>
--- return True if the system is full.
---@return boolean
function m:isFull() end

---  Gets the batch node.<br>
--- return The batch node.
---@return cc.ParticleBatchNode
function m:getBatchNode() end

---  Gets the start color of each particle.<br>
--- return The start color of each particle.
---@return cc.c4f
function m:getStartColor() end

---  Gets the particles movement type: Free or Grouped.<br>
--- since v0.8<br>
--- return The particles movement type.
---@return int
function m:getPositionType() end

---  Sets the position variance of the emitter.<br>
--- param pos The position variance of the emitter.
---@param pos cc.vec2
---@return cc.ParticleSystem
function m:setPosVar(pos) end

---  Gets the end spin of each particle.<br>
--- return The end spin of each particle.
---@return float
function m:getEndSpin() end

---  Sets the rotate per second variance.<br>
--- param degrees The rotate per second variance.
---@param degrees float
---@return cc.ParticleSystem
function m:setRotatePerSecondVar(degrees) end

---@param sourcePositionCompatible boolean
---@return cc.ParticleSystem
function m:setSourcePositionCompatible(sourcePositionCompatible) end

---  Gets the start spin variance of each particle.<br>
--- return The start spin variance of each particle.
---@return float
function m:getStartSpinVar() end

---  Gets the radial acceleration variance.<br>
--- return The radial acceleration variance.
---@return float
function m:getRadialAccelVar() end

---  Gets the end size variance in pixels of each particle.<br>
--- return The end size variance in pixels of each particle.
---@return float
function m:getEndSizeVar() end

---  Sets the tangential acceleration.<br>
--- param t The tangential acceleration.
---@param t float
---@return cc.ParticleSystem
function m:setTangentialAccel(t) end

---  Gets the radial acceleration.<br>
--- return The radial acceleration.
---@return float
function m:getRadialAccel() end

---  Sets the start radius.<br>
--- param startRadius The start radius.
---@param startRadius float
---@return cc.ParticleSystem
function m:setStartRadius(startRadius) end

---  Sets the number of degrees to rotate a particle around the source pos per second.<br>
--- param degrees The number of degrees to rotate a particle around the source pos per second.
---@param degrees float
---@return cc.ParticleSystem
function m:setRotatePerSecond(degrees) end

---  Sets the end size in pixels of each particle.<br>
--- param endSize The end size in pixels of each particle.
---@param endSize float
---@return cc.ParticleSystem
function m:setEndSize(endSize) end

---  Gets the gravity.<br>
--- return The gravity.
---@return cc.vec2
function m:getGravity() end

--- 
---@return cc.ParticleSystem
function m:resumeEmissions() end

---  Gets the tangential acceleration.<br>
--- return The tangential acceleration.
---@return float
function m:getTangentialAccel() end

---  Sets the end radius.<br>
--- param endRadius The end radius.
---@param endRadius float
---@return cc.ParticleSystem
function m:setEndRadius(endRadius) end

---  Gets the speed.<br>
--- return The speed.
---@return float
function m:getSpeed() end

--- 
---@return cc.ParticleSystem
function m:pauseEmissions() end

---  Gets the angle of each particle. <br>
--- return The angle of each particle.
---@return float
function m:getAngle() end

---  Sets the end color and end color variation of each particle.<br>
--- param color The end color and end color variation of each particle.
---@param color cc.c4f
---@return cc.ParticleSystem
function m:setEndColor(color) end

---  Sets the start spin of each particle.<br>
--- param spin The start spin of each particle.
---@param spin float
---@return cc.ParticleSystem
function m:setStartSpin(spin) end

---  Sets how many seconds the emitter will run. -1 means 'forever'.<br>
--- param duration The seconds that the emitter will run. -1 means 'forever'.
---@param duration float
---@return cc.ParticleSystem
function m:setDuration(duration) end

---  Initializes a system with a fixed number of particles
---@param numberOfParticles int
---@return boolean
function m:initWithTotalParticles(numberOfParticles) end

--- 
---@param count int
---@return cc.ParticleSystem
function m:addParticles(count) end

--- 
---@param texture cc.Texture2D
---@return cc.ParticleSystem
function m:setTexture(texture) end

---  Gets the position variance of the emitter.<br>
--- return The position variance of the emitter.
---@return cc.vec2
function m:getPosVar() end

---  Call the update method with no time..
---@return cc.ParticleSystem
function m:updateWithNoTime() end

---  Whether or not the particle system is blend additive.<br>
--- return True if the particle system is blend additive.
---@return boolean
function m:isBlendAdditive() end

---  Gets the speed variance.<br>
--- return The speed variance.
---@return float
function m:getSpeedVar() end

---  Sets the particles movement type: Free or Grouped.<br>
--- since v0.8<br>
--- param type The particles movement type.
---@param type int
---@return cc.ParticleSystem
function m:setPositionType(type) end

--- 
---@return cc.ParticleSystem
function m:stopSystem() end

---  Gets the source position of the emitter.<br>
--- return The source position of the emitter.
---@return cc.vec2
function m:getSourcePosition() end

---  Sets the life variance of each particle.<br>
--- param lifeVar The life variance of each particle.
---@param lifeVar float
---@return cc.ParticleSystem
function m:setLifeVar(lifeVar) end

---  Sets the maximum particles of the system.<br>
--- param totalParticles The maximum particles of the system.
---@param totalParticles int
---@return cc.ParticleSystem
function m:setTotalParticles(totalParticles) end

---  Sets the end color variance of each particle.<br>
--- param color The end color variance of each particle.
---@param color cc.c4f
---@return cc.ParticleSystem
function m:setEndColorVar(color) end

---  Gets the index of system in batch node array.<br>
--- return The index of system in batch node array.
---@return int
function m:getAtlasIndex() end

---  Gets the start size in pixels of each particle.<br>
--- return The start size in pixels of each particle.
---@return float
function m:getStartSize() end

---  Sets the start spin variance of each particle.<br>
--- param pinVar The start spin variance of each particle.
---@param pinVar float
---@return cc.ParticleSystem
function m:setStartSpinVar(pinVar) end

---  Kill all living particles.
---@return cc.ParticleSystem
function m:resetSystem() end

---  Sets the index of system in batch node array.<br>
--- param index The index of system in batch node array.
---@param index int
---@return cc.ParticleSystem
function m:setAtlasIndex(index) end

---  Sets the tangential acceleration variance.<br>
--- param t The tangential acceleration variance.
---@param t float
---@return cc.ParticleSystem
function m:setTangentialAccelVar(t) end

---  Sets the end radius variance.<br>
--- param endRadiusVar The end radius variance.
---@param endRadiusVar float
---@return cc.ParticleSystem
function m:setEndRadiusVar(endRadiusVar) end

---  Gets the end radius.<br>
--- return The end radius.
---@return float
function m:getEndRadius() end

---  Whether or not the particle system is active.<br>
--- return True if the particle system is active.
---@return boolean
function m:isActive() end

---  Sets the radial acceleration variance.<br>
--- param t The radial acceleration variance.
---@param t float
---@return cc.ParticleSystem
function m:setRadialAccelVar(t) end

---  Sets the start size in pixels of each particle.<br>
--- param startSize The start size in pixels of each particle.
---@param startSize float
---@return cc.ParticleSystem
function m:setStartSize(startSize) end

---  Sets the speed.<br>
--- param speed The speed.
---@param speed float
---@return cc.ParticleSystem
function m:setSpeed(speed) end

---  Gets the start spin of each particle.<br>
--- return The start spin of each particle.
---@return float
function m:getStartSpin() end

--- 
---@return string
function m:getResourceFile() end

---  Gets the number of degrees to rotate a particle around the source pos per second.<br>
--- return The number of degrees to rotate a particle around the source pos per second.
---@return float
function m:getRotatePerSecond() end

---  Sets the mode of the emitter.<br>
--- param mode The mode of the emitter.
---@param mode int
---@return cc.ParticleSystem
function m:setEmitterMode(mode) end

---  Gets how many seconds the emitter will run. -1 means 'forever'.<br>
--- return The seconds that the emitter will run. -1 means 'forever'.
---@return float
function m:getDuration() end

---  Sets the source position of the emitter.<br>
--- param pos The source position of the emitter.
---@param pos cc.vec2
---@return cc.ParticleSystem
function m:setSourcePosition(pos) end

--- 
---@return cc.ParticleSystem
function m:stop() end

---  Update the verts position data of particle,<br>
--- should be overridden by subclasses. 
---@return cc.ParticleSystem
function m:updateParticleQuads() end

---  Gets the end spin variance of each particle.<br>
--- return The end spin variance of each particle.
---@return float
function m:getEndSpinVar() end

---  Sets the particle system blend additive.<br>
--- param value True if the particle system is blend additive.
---@param value boolean
---@return cc.ParticleSystem
function m:setBlendAdditive(value) end

---  Sets the life of each particle.<br>
--- param life The life of each particle.
---@param life float
---@return cc.ParticleSystem
function m:setLife(life) end

---  Sets the angle variance of each particle.<br>
--- param angleVar The angle variance of each particle.
---@param angleVar float
---@return cc.ParticleSystem
function m:setAngleVar(angleVar) end

---  Sets the rotation of each particle to its direction.<br>
--- param t True if the rotation is the direction.
---@param t boolean
---@return cc.ParticleSystem
function m:setRotationIsDir(t) end

---@return cc.ParticleSystem
function m:start() end

---  Sets the end size variance in pixels of each particle.<br>
--- param sizeVar The end size variance in pixels of each particle.
---@param sizeVar float
---@return cc.ParticleSystem
function m:setEndSizeVar(sizeVar) end

---  Sets the angle of each particle.<br>
--- param angle The angle of each particle.
---@param angle float
---@return cc.ParticleSystem
function m:setAngle(angle) end

---  Sets the batch node.<br>
--- param batchNode The batch node.
---@param batchNode cc.ParticleBatchNode
---@return cc.ParticleSystem
function m:setBatchNode(batchNode) end

---  Gets the tangential acceleration variance.<br>
--- return The tangential acceleration variance.
---@return float
function m:getTangentialAccelVar() end

---  Switch between different kind of emitter modes:<br>
--- - kParticleModeGravity: uses gravity, speed, radial and tangential acceleration.<br>
--- - kParticleModeRadius: uses radius movement + rotation.<br>
--- return The mode of the emitter.
---@return int
function m:getEmitterMode() end

---  Sets the end spin variance of each particle.<br>
--- param endSpinVar The end spin variance of each particle.
---@param endSpinVar float
---@return cc.ParticleSystem
function m:setEndSpinVar(endSpinVar) end

---  initializes a ParticleSystem from a plist file.<br>
--- This plist files can be created manually or with Particle Designer:<br>
--- http:particledesigner.71squared.com/<br>
--- since v0.99.3
---@param plistFile string
---@return boolean
function m:initWithFile(plistFile) end

---  Gets the angle variance of each particle.<br>
--- return The angle variance of each particle.
---@return float
function m:getAngleVar() end

---  Sets the start color of each particle.<br>
--- param color The start color of each particle.
---@param color cc.c4f
---@return cc.ParticleSystem
function m:setStartColor(color) end

---  Gets the rotate per second variance.<br>
--- return The rotate per second variance.
---@return float
function m:getRotatePerSecondVar() end

---  Gets the end size in pixels of each particle.<br>
--- return The end size in pixels of each particle.
---@return float
function m:getEndSize() end

---  Gets the life of each particle.<br>
--- return The life of each particle.
---@return float
function m:getLife() end

---  Are the emissions paused<br>
--- return True if the emissions are paused, else false
---@return boolean
function m:isPaused() end

---  Sets the speed variance.<br>
--- param speed The speed variance.
---@param speed float
---@return cc.ParticleSystem
function m:setSpeedVar(speed) end

---  Set the particle system auto removed it self on finish.<br>
--- param var True if the particle system removed self on finish.
---@param var boolean
---@return cc.ParticleSystem
function m:setAutoRemoveOnFinish(var) end

---  Sets the gravity.<br>
--- param g The gravity.
---@param g cc.vec2
---@return cc.ParticleSystem
function m:setGravity(g) end

---  Update the VBO verts buffer which does not use batch node,<br>
--- should be overridden by subclasses. 
---@return cc.ParticleSystem
function m:postStep() end

---  Sets the emission rate of the particles.<br>
--- param rate The emission rate of the particles.
---@param rate float
---@return cc.ParticleSystem
function m:setEmissionRate(rate) end

---  Gets the end color variance of each particle.<br>
--- return The end color variance of each particle.
---@return cc.c4f
function m:getEndColorVar() end

---  Whether or not the rotation of each particle to its direction.<br>
--- return True if the rotation is the direction.
---@return boolean
function m:getRotationIsDir() end

---  Gets the emission rate of the particles.<br>
--- return The emission rate of the particles.
---@return float
function m:getEmissionRate() end

---  Gets the end color and end color variation of each particle.<br>
--- return The end color and end color variation of each particle.
---@return cc.c4f
function m:getEndColor() end

---  Gets the life variance of each particle.<br>
--- return The life variance of each particle.
---@return float
function m:getLifeVar() end

---  Sets the start size variance in pixels of each particle.<br>
--- param sizeVar The start size variance in pixels of each particle.
---@param sizeVar float
---@return cc.ParticleSystem
function m:setStartSizeVar(sizeVar) end

---  Gets the start radius.<br>
--- return The start radius.
---@return float
function m:getStartRadius() end

---  Gets the Quantity of particles that are being simulated at the moment.<br>
--- return The Quantity of particles that are being simulated at the moment.
---@return uint
function m:getParticleCount() end

---  Gets the start radius variance.<br>
--- return The start radius variance.
---@return float
function m:getStartRadiusVar() end

--- js NA<br>
--- lua NA
---@return cc.BlendFunc
function m:getBlendFunc() end

---  Sets the start color variance of each particle.<br>
--- param color The start color variance of each particle.
---@param color cc.c4f
---@return cc.ParticleSystem
function m:setStartColorVar(color) end

---  Sets the end spin of each particle.<br>
--- param endSpin The end spin of each particle.
---@param endSpin float
---@return cc.ParticleSystem
function m:setEndSpin(endSpin) end

---  Sets the radial acceleration.<br>
--- param t The radial acceleration.
---@param t float
---@return cc.ParticleSystem
function m:setRadialAccel(t) end

---@overload fun(self:cc.ParticleSystem, dictionary:table<any:any>):boolean
---@param dictionary table<any:any>
---@param dirname string
---@return boolean
function m:initWithDictionary(dictionary, dirname) end

---  Whether or not the particle system removed self on finish.<br>
--- return True if the particle system removed self on finish.
---@return boolean
function m:isAutoRemoveOnFinish() end

--- 
---@return boolean
function m:isSourcePositionCompatible() end

---  Gets the maximum particles of the system.<br>
--- return The maximum particles of the system.
---@return int
function m:getTotalParticles() end

---  Sets the start radius variance.<br>
--- param startRadiusVar The start radius variance.
---@param startRadiusVar float
---@return cc.ParticleSystem
function m:setStartRadiusVar(startRadiusVar) end

--- code<br>
--- When this function bound into js or lua,the parameter will be changed<br>
--- In js: var setBlendFunc(var src, var dst)<br>
--- In lua: local setBlendFunc(local src, local dst)<br>
--- endcode
---@param blendFunc cc.BlendFunc
---@return cc.ParticleSystem
function m:setBlendFunc(blendFunc) end

---  Gets the end radius variance.<br>
--- return The end radius variance.
---@return float
function m:getEndRadiusVar() end

---  Gets the start color variance of each particle.<br>
--- return The start color variance of each particle.
---@return cc.c4f
function m:getStartColorVar() end

---  Creates an initializes a ParticleSystem from a plist file.<br>
--- This plist files can be created manually or with Particle Designer:<br>
--- http:particledesigner.71squared.com/<br>
--- since v2.0<br>
--- param plistFile Particle plist file name.<br>
--- return An autoreleased ParticleSystem object.
---@param plistFile string
---@return cc.ParticleSystem
function m:create(plistFile) end

---  Create a system with a fixed number of particles.<br>
--- param numberOfParticles A given number of particles.<br>
--- return An autoreleased ParticleSystemQuad object.<br>
--- js NA
---@param numberOfParticles int
---@return cc.ParticleSystem
function m:createWithTotalParticles(numberOfParticles) end

---  Gets all ParticleSystem references
---@return any[]
function m:getAllParticleSystems() end

--- 
---@param newScaleY float
---@return cc.ParticleSystem
function m:setScaleY(newScaleY) end

--- 
---@param newScaleX float
---@return cc.ParticleSystem
function m:setScaleX(newScaleX) end

--- 
---@return boolean
function m:isOpacityModifyRGB() end

---  does the alpha value modify color 
---@param opacityModifyRGB boolean
---@return cc.ParticleSystem
function m:setOpacityModifyRGB(opacityModifyRGB) end

--- 
---@param s float
---@return cc.ParticleSystem
function m:setScale(s) end

--- 
---@param dt float
---@return cc.ParticleSystem
function m:update(dt) end

---  initializes a ParticleSystem
---@return boolean
function m:init() end

--- 
---@param newRotation float
---@return cc.ParticleSystem
function m:setRotation(newRotation) end

--- js ctor
---@return cc.ParticleSystem
function m:ParticleSystem() end



return m