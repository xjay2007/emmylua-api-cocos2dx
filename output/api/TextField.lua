--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccui.TextField : ccui.Widget
local m = {}

--- brief Toggle attach with IME.<br>
--- param attach True if attach with IME, false otherwise.
---@param attach boolean
---@return ccui.TextField
function m:setAttachWithIME(attach) end

--- brief Query the font size.<br>
--- return The integer font size.
---@return int
function m:getFontSize() end

--- Query the content of TextField.<br>
--- return The string value of TextField.
---@return string
function m:getString() end

--- brief Change password style text.<br>
--- param styleText The styleText for password mask, the default value is "*".
---@param styleText char
---@return ccui.TextField
function m:setPasswordStyleText(styleText) end

--- brief Whether it is ready to delete backward in TextField.<br>
--- return True is the delete backward is enabled, false otherwise.
---@return boolean
function m:getDeleteBackward() end

--- brief Query the text string color.<br>
--- return The color of the text.
---@return cc.c4b
function m:getTextColor() end

--- brief Get the placeholder of TextField.<br>
--- return A placeholder string.
---@return string
function m:getPlaceHolder() end

--- brief Query whether the IME is attached or not.<br>
--- return True if IME is attached, false otherwise.
---@return boolean
function m:getAttachWithIME() end

--- brief Change the font name of TextField.<br>
--- param name The font name string.
---@param name string
---@return ccui.TextField
function m:setFontName(name) end

--- brief Whether it is ready to get the inserted text or not.<br>
--- return True if the insert text is ready, false otherwise.
---@return boolean
function m:getInsertText() end

--- brief Toggle enable insert text mode<br>
--- param insertText True if enable insert text, false otherwise.
---@param insertText boolean
---@return ccui.TextField
function m:setInsertText(insertText) end

--- Change content of TextField.<br>
--- param text A string content.
---@param text string
---@return ccui.TextField
function m:setString(text) end

--- brief Query whether IME is detached or not.<br>
--- return True if IME is detached, false otherwise.
---@return boolean
function m:getDetachWithIME() end

--- brief Change the vertical text alignment.<br>
---@param alignment int
---@return ccui.TextField
function m:setTextVerticalAlignment(alignment) end

--- Add a event listener to TextField, when some predefined event happens, the callback will be called.<br>
--- param callback A callback function with type of `ccTextFieldCallback`.
---@param callback fun
---@return ccui.TextField
function m:addEventListener(callback) end

--- brief Detach the IME.
---@return ccui.TextField
function m:didNotSelectSelf() end

--- brief Query the TextField's font name.<br>
--- return The font name string.
---@return string
function m:getFontName() end

--- brief Change the text area size.<br>
--- param size A delimitation zone.
---@param size cc.size
---@return ccui.TextField
function m:setTextAreaSize(size) end

--- brief Attach the IME for inputing.
---@return ccui.TextField
function m:attachWithIME() end

--- brief Query the input string length.<br>
--- return A integer length value.
---@return int
function m:getStringLength() end

--- brief Get the renderer size in auto mode.<br>
--- return A delimitation zone.
---@return cc.size
function m:getAutoRenderSize() end

--- brief Toggle enable password input mode.<br>
--- param enable True if enable password input mode, false otherwise.
---@param enable boolean
---@return ccui.TextField
function m:setPasswordEnabled(enable) end

--- brief Query the placeholder string color.<br>
--- return The color of placeholder.
---@return cc.c4b
function m:getPlaceHolderColor() end

--- brief Query the password style text.<br>
--- return A password style text.
---@return char
function m:getPasswordStyleText() end

--- brief Toggle maximize length enable<br>
--- param enable True if enable maximize length, false otherwise.
---@param enable boolean
---@return ccui.TextField
function m:setMaxLengthEnabled(enable) end

--- brief Query whether password is enabled or not.<br>
--- return True if password is enabled, false otherwise.
---@return boolean
function m:isPasswordEnabled() end

--- brief Toggle enable delete backward mode.<br>
--- param deleteBackward True is delete backward is enabled, false otherwise.
---@param deleteBackward boolean
---@return ccui.TextField
function m:setDeleteBackward(deleteBackward) end

--- Set cursor position, if enabled<br>
--- js NA
---@param cursorPosition unsigned long
---@return ccui.TextField
function m:setCursorPosition(cursorPosition) end

--- brief Inquire the horizontal alignment<br>
--- return The horizontal alignment
---@return int
function m:getTextHorizontalAlignment() end

--- brief Change font size of TextField.<br>
--- param size The integer font size.
---@param size int
---@return ccui.TextField
function m:setFontSize(size) end

--- brief Set placeholder of TextField.<br>
--- param value The string value of placeholder.
---@param value string
---@return ccui.TextField
function m:setPlaceHolder(value) end

--- Set cursor position to hit letter, if enabled<br>
--- js NA
---@param point cc.vec2
---@param camera cc.Camera
---@return ccui.TextField
function m:setCursorFromPoint(point, camera) end

---@overload fun(self:ccui.TextField, color:cc.c4b):ccui.TextField
---@param color cc.c3b
---@return ccui.TextField
function m:setPlaceHolderColor(color) end

--- brief Change horizontal text alignment.<br>
---@param alignment int
---@return ccui.TextField
function m:setTextHorizontalAlignment(alignment) end

--- brief Change the text color.<br>
--- param textColor The color value in `Color4B`.
---@param textColor cc.c4b
---@return ccui.TextField
function m:setTextColor(textColor) end

--- Set char showing cursor.<br>
--- js NA
---@param cursor char
---@return ccui.TextField
function m:setCursorChar(cursor) end

--- brief Query maximize input length of TextField.<br>
--- return The integer value of maximize input length.
---@return int
function m:getMaxLength() end

--- brief Query whether max length is enabled or not.<br>
--- return True if maximize length is enabled, false otherwise.
---@return boolean
function m:isMaxLengthEnabled() end

--- brief Toggle detach with IME.<br>
--- param detach True if detach with IME, false otherwise.
---@param detach boolean
---@return ccui.TextField
function m:setDetachWithIME(detach) end

--- brief Inquire the horizontal alignment<br>
--- return The horizontal alignment
---@return int
function m:getTextVerticalAlignment() end

--- brief Toggle enable touch area.<br>
--- param enable True if enable touch area, false otherwise.
---@param enable boolean
---@return ccui.TextField
function m:setTouchAreaEnabled(enable) end

--- brief Change maximize input length limitation.<br>
--- param length A character count in integer.
---@param length int
---@return ccui.TextField
function m:setMaxLength(length) end

--- Set enable cursor use.<br>
--- js NA
---@param enabled boolean
---@return ccui.TextField
function m:setCursorEnabled(enabled) end

--- brief Set the touch size<br>
--- param size A delimitation zone.
---@param size cc.size
---@return ccui.TextField
function m:setTouchSize(size) end

--- brief Get current touch size of TextField.<br>
--- return The TextField's touch size.
---@return cc.size
function m:getTouchSize() end

---@overload fun(self:ccui.TextField):ccui.TextField
---@param placeholder string
---@param fontName string
---@param fontSize int
---@return ccui.TextField
function m:create(placeholder, fontName, fontSize) end

--- 
---@return cc.Ref
function m:createInstance() end

--- 
---@return cc.Node
function m:getVirtualRenderer() end

--- Returns the "class name" of widget.
---@return string
function m:getDescription() end

--- 
---@param dt float
---@return ccui.TextField
function m:update(dt) end

--- 
---@param pt cc.vec2
---@param camera cc.Camera
---@param p cc.vec3
---@return boolean
function m:hitTest(pt, camera, p) end

--- 
---@return boolean
function m:init() end

--- 
---@return cc.size
function m:getVirtualRendererSize() end

--- brief Default constructor.
---@return ccui.TextField
function m:TextField() end



return m