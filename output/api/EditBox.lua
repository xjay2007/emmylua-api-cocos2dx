--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccui.EditBox : ccui.Widget,ccui.IMEDelegate
local m = {}

--- Get the font size.<br>
--- return The font size.
---@return int
function m:getFontSize() end

--- js NA<br>
--- lua NA
---@param info cc.IMEKeyboardNotificationInfo
---@return ccui.EditBox
function m:keyboardDidShow(info) end

--- get a script Handler<br>
--- js NA<br>
--- lua NA
---@return int
function m:getScriptEditBoxHandler() end

--- Get the text entered in the edit box.<br>
--- return The text entered in the edit box.
---@return char
function m:getText() end

--- Get the input mode of the edit box.<br>
--- return One of the EditBox::InputMode constants.
---@return int
function m:getInputMode() end

--- Get the placeholder's font name. only system font is allowed.<br>
--- return The font name.
---@return char
function m:getPlaceholderFontName() end

--- js NA<br>
--- lua NA
---@param info cc.IMEKeyboardNotificationInfo
---@return ccui.EditBox
function m:keyboardDidHide(info) end

--- Set the placeholder's font name. only system font is allowed.<br>
--- param pFontName The font name.
---@param pFontName char
---@return ccui.EditBox
function m:setPlaceholderFontName(pFontName) end

--- Get the placeholder's font size.<br>
--- return The font size.
---@return int
function m:getPlaceholderFontSize() end

--- Get a text in the edit box that acts as a placeholder when an<br>
--- edit box is empty.
---@return char
function m:getPlaceHolder() end

--- Set the font name. Only system font is allowed.<br>
--- param pFontName The font name.
---@param pFontName char
---@return ccui.EditBox
function m:setFontName(pFontName) end

--- Registers a script function that will be called for EditBox events.<br>
--- This handler will be removed automatically after onExit() called.<br>
--- code<br>
--- -- lua sample<br>
--- local function editboxEventHandler(eventType)<br>
--- if eventType == "began" then<br>
--- -- triggered when an edit box gains focus after keyboard is shown<br>
--- elseif eventType == "ended" then<br>
--- -- triggered when an edit box loses focus after keyboard is hidden.<br>
--- elseif eventType == "changed" then<br>
--- -- triggered when the edit box text was changed.<br>
--- elseif eventType == "return" then<br>
--- -- triggered when the return button was pressed or the outside area of keyboard was touched.<br>
--- end<br>
--- end<br>
--- local editbox = EditBox:create(Size(...), Scale9Sprite:create(...))<br>
--- editbox = registerScriptEditBoxHandler(editboxEventHandler)<br>
--- endcode<br>
--- param handler A number that indicates a lua function.<br>
--- js NA<br>
--- lua NA
---@param handler int
---@return ccui.EditBox
function m:registerScriptEditBoxHandler(handler) end

--- Set the placeholder's font size.<br>
--- param fontSize The font size.
---@param fontSize int
---@return ccui.EditBox
function m:setPlaceholderFontSize(fontSize) end

--- Set the input mode of the edit box.<br>
--- param inputMode One of the EditBox::InputMode constants.
---@param inputMode int
---@return ccui.EditBox
function m:setInputMode(inputMode) end

--- Unregisters a script function that will be called for EditBox events.<br>
--- js NA<br>
--- lua NA
---@return ccui.EditBox
function m:unregisterScriptEditBoxHandler() end

--- js NA<br>
--- lua NA
---@param info cc.IMEKeyboardNotificationInfo
---@return ccui.EditBox
function m:keyboardWillShow(info) end

---@overload fun(self:ccui.EditBox, color:cc.c4b):ccui.EditBox
---@param color cc.c3b
---@return ccui.EditBox
function m:setPlaceholderFontColor(color) end

--- Get the return type that are to be applied to the edit box.<br>
--- return One of the EditBox::KeyboardReturnType constants.
---@return int
function m:getReturnType() end

---@overload fun(self:ccui.EditBox, color:cc.c4b):ccui.EditBox
---@param color cc.c3b
---@return ccui.EditBox
function m:setFontColor(color) end

--- Get the font name.<br>
--- return The font name.
---@return char
function m:getFontName() end

--- js NA<br>
--- lua NA
---@param info cc.IMEKeyboardNotificationInfo
---@return ccui.EditBox
function m:keyboardWillHide(info) end

--- 
---@param sender cc.Ref
---@param controlEvent int
---@return ccui.EditBox
function m:touchDownAction(sender, controlEvent) end

--- Get the font color of the widget's text.
---@return cc.c4b
function m:getFontColor() end

--- Get the input flags that are to be applied to the edit box.<br>
--- return One of the EditBox::InputFlag constants.
---@return int
function m:getInputFlag() end

--- Get the text horizontal alignment.
---@return int
function m:getTextHorizontalAlignment() end

--- Set the placeholder's font. Only system font is allowed.<br>
--- param pFontName The font name.<br>
--- param fontSize The font size.
---@param pFontName char
---@param fontSize int
---@return ccui.EditBox
function m:setPlaceholderFont(pFontName, fontSize) end

--- Set the font size.<br>
--- param fontSize The font size.
---@param fontSize int
---@return ccui.EditBox
function m:setFontSize(fontSize) end

---@overload fun(self:ccui.EditBox, size:cc.size, normal9SpriteBg:ccui.Scale9Sprite):boolean
---@param size cc.size
---@param normal9SpriteBg string
---@param texType int
---@return boolean
function m:initWithSizeAndBackgroundSprite(size, normal9SpriteBg, texType) end

--- Set a text in the edit box that acts as a placeholder when an<br>
--- edit box is empty.<br>
--- param pText The given text.
---@param pText char
---@return ccui.EditBox
function m:setPlaceHolder(pText) end

--- Set the return type that are to be applied to the edit box.<br>
--- param returnType One of the EditBox::KeyboardReturnType constants.
---@param returnType int
---@return ccui.EditBox
function m:setReturnType(returnType) end

--- Set the input flags that are to be applied to the edit box.<br>
--- param inputFlag One of the EditBox::InputFlag constants.
---@param inputFlag int
---@return ccui.EditBox
function m:setInputFlag(inputFlag) end

--- Gets the maximum input length of the edit box.<br>
--- return Maximum input length.
---@return int
function m:getMaxLength() end

--- Set the text entered in the edit box.<br>
--- param pText The given text.
---@param pText char
---@return ccui.EditBox
function m:setText(pText) end

--- Get the font color of the placeholder text when the edit box is empty.
---@return cc.c4b
function m:getPlaceholderFontColor() end

--- Sets the maximum input length of the edit box.<br>
--- Setting this value enables multiline input mode by default.<br>
--- Available on Android, iOS and Windows Phone.<br>
--- param maxLength The maximum length.
---@param maxLength int
---@return ccui.EditBox
function m:setMaxLength(maxLength) end

--- Set the font. Only system font is allowed.<br>
--- param pFontName The font name.<br>
--- param fontSize The font size.
---@param pFontName char
---@param fontSize int
---@return ccui.EditBox
function m:setFont(pFontName, fontSize) end

--- Set the text horizontal alignment.
---@param alignment int
---@return ccui.EditBox
function m:setTextHorizontalAlignment(alignment) end

---@overload fun(self:ccui.EditBox, size:cc.size, normalSprite:string, pressedSprite:int):ccui.EditBox
---@param size cc.size
---@param normalSprite ccui.Scale9Sprite
---@param pressedSprite ccui.Scale9Sprite
---@param disabledSprite ccui.Scale9Sprite
---@return ccui.EditBox
function m:create(size, normalSprite, pressedSprite, disabledSprite) end

--- 
---@param anchorPoint cc.vec2
---@return ccui.EditBox
function m:setAnchorPoint(anchorPoint) end

--- js NA<br>
--- lua NA
---@param renderer cc.Renderer
---@param parentTransform mat4_table
---@param parentFlags uint
---@return ccui.EditBox
function m:draw(renderer, parentTransform, parentFlags) end

--- Returns the "class name" of widget.
---@return string
function m:getDescription() end

--- 
---@param pos cc.vec2
---@return ccui.EditBox
function m:setPosition(pos) end

--- 
---@param visible boolean
---@return ccui.EditBox
function m:setVisible(visible) end

--- 
---@param size cc.size
---@return ccui.EditBox
function m:setContentSize(size) end

--- Constructor.<br>
--- js ctor<br>
--- lua new
---@return ccui.EditBox
function m:EditBox() end



return m