--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.ControlPotentiometer : cc.Control
local m = {}

--- 
---@param var cc.vec2
---@return cc.ControlPotentiometer
function m:setPreviousLocation(var) end

--- 
---@param value float
---@return cc.ControlPotentiometer
function m:setValue(value) end

--- 
---@return cc.ProgressTimer
function m:getProgressTimer() end

--- 
---@return float
function m:getMaximumValue() end

---  Returns the angle in degree between line1 and line2. 
---@param beginLineA cc.vec2
---@param endLineA cc.vec2
---@param beginLineB cc.vec2
---@param endLineB cc.vec2
---@return float
function m:angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(beginLineA, endLineA, beginLineB, endLineB) end

---  Factorize the event dispatch into these methods. 
---@param location cc.vec2
---@return cc.ControlPotentiometer
function m:potentiometerBegan(location) end

--- 
---@param maximumValue float
---@return cc.ControlPotentiometer
function m:setMaximumValue(maximumValue) end

--- 
---@return float
function m:getMinimumValue() end

--- 
---@param var cc.Sprite
---@return cc.ControlPotentiometer
function m:setThumbSprite(var) end

--- 
---@return float
function m:getValue() end

--- 
---@return cc.vec2
function m:getPreviousLocation() end

---  Returns the distance between the point1 and point2. 
---@param point1 cc.vec2
---@param point2 cc.vec2
---@return float
function m:distanceBetweenPointAndPoint(point1, point2) end

--- 
---@param location cc.vec2
---@return cc.ControlPotentiometer
function m:potentiometerEnded(location) end

--- 
---@param var cc.ProgressTimer
---@return cc.ControlPotentiometer
function m:setProgressTimer(var) end

--- 
---@param minimumValue float
---@return cc.ControlPotentiometer
function m:setMinimumValue(minimumValue) end

--- 
---@return cc.Sprite
function m:getThumbSprite() end

--- Initializes a potentiometer with a track sprite and a progress bar.<br>
--- param trackSprite   Sprite, that is used as a background.<br>
--- param progressTimer ProgressTimer, that is used as a progress bar.
---@param trackSprite cc.Sprite
---@param progressTimer cc.ProgressTimer
---@param thumbSprite cc.Sprite
---@return boolean
function m:initWithTrackSprite_ProgressTimer_ThumbSprite(trackSprite, progressTimer, thumbSprite) end

--- 
---@param location cc.vec2
---@return cc.ControlPotentiometer
function m:potentiometerMoved(location) end

--- Creates potentiometer with a track filename and a progress filename.
---@param backgroundFile char
---@param progressFile char
---@param thumbFile char
---@return cc.ControlPotentiometer
function m:create(backgroundFile, progressFile, thumbFile) end

--- 
---@param touch cc.Touch
---@return boolean
function m:isTouchInside(touch) end

--- 
---@param enabled boolean
---@return cc.ControlPotentiometer
function m:setEnabled(enabled) end

--- 
---@param pTouch cc.Touch
---@param pEvent cc.Event
---@return cc.ControlPotentiometer
function m:onTouchMoved(pTouch, pEvent) end

--- 
---@param pTouch cc.Touch
---@param pEvent cc.Event
---@return cc.ControlPotentiometer
function m:onTouchEnded(pTouch, pEvent) end

--- 
---@param pTouch cc.Touch
---@param pEvent cc.Event
---@return boolean
function m:onTouchBegan(pTouch, pEvent) end

--- js ctor<br>
--- lua new
---@return cc.ControlPotentiometer
function m:ControlPotentiometer() end



return m