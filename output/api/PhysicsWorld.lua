--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.PhysicsWorld
local m = {}

--- set the gravity value of this physics world.<br>
--- param gravity A gravity value of this physics world.
---@param gravity cc.vec2
---@return cc.PhysicsWorld
function m:setGravity(gravity) end

--- Get all the bodies that in this physics world.<br>
--- return A Vector<PhysicsBody*>& object contains all bodies in this physics world. 
---@return any[]
function m:getAllBodies() end

--- set the number of update of the physics world in a second.<br>
--- 0 - disable fixed step system<br>
--- default value is 0
---@param updatesPerSecond int
---@return cc.PhysicsWorld
function m:setFixedUpdateRate(updatesPerSecond) end

--- set the number of substeps in an update of the physics world.<br>
--- One physics update will be divided into several substeps to increase its accuracy.<br>
--- param steps An integer number, default value is 1.
---@param steps int
---@return cc.PhysicsWorld
function m:setSubsteps(steps) end

--- To control the step of physics.<br>
--- If you want control it by yourself( fixed-timestep for example ), you can set this to false and call step by yourself.<br>
--- attention If you set auto step to false, setSpeed setSubsteps and setUpdateRate won't work, you need to control the time step by yourself.<br>
--- param autoStep A bool object, default value is true.
---@param autoStep boolean
---@return cc.PhysicsWorld
function m:setAutoStep(autoStep) end

--- Adds a joint to this physics world.<br>
--- This joint will be added to this physics world at next frame.<br>
--- attention If this joint is already added to another physics world, it will be removed from that world first and then add to this world.<br>
--- param   joint   A pointer to an existing PhysicsJoint object.
---@param joint cc.PhysicsJoint
---@return cc.PhysicsWorld
function m:addJoint(joint) end

--- Remove all joints from this physics world.<br>
--- attention This function is invoked in the destructor of this physics world, you do not use this api in common.<br>
--- param   destroy   true all joints will be destroyed after remove from this world, false otherwise.
---@return cc.PhysicsWorld
function m:removeAllJoints() end

--- Get the debug draw mask.<br>
--- return An integer number.
---@return int
function m:getDebugDrawMask() end

--- Get the auto step of this physics world.<br>
--- return A bool object.
---@return boolean
function m:isAutoStep() end

---@overload fun(self:cc.PhysicsWorld, body:int):cc.PhysicsWorld
---@param body cc.PhysicsBody
---@return cc.PhysicsWorld
function m:removeBody(body) end

--- Remove a joint from this physics world.<br>
--- If this world is not locked, the joint is removed immediately, otherwise at next frame. <br>
--- If this joint is connected with a body, it will be removed from the body also.<br>
--- param   joint   A pointer to an existing PhysicsJoint object.<br>
--- param   destroy   true this joint will be destroyed after remove from this world, false otherwise.
---@param joint cc.PhysicsJoint
---@param destroy boolean
---@return cc.PhysicsWorld
function m:removeJoint(joint, destroy) end

--- Get physics shapes that contains the point. <br>
--- All shapes contains the point will be pushed in a Vector<PhysicsShape*> object.<br>
--- attention The point must lie inside a shape.<br>
--- param   point   A Vec2 object contains the position of the point.<br>
--- return A Vector<PhysicsShape*> object contains all found PhysicsShape pointer.
---@param point cc.vec2
---@return any[]
function m:getShapes(point) end

--- The step for physics world.<br>
--- The times passing for simulate the physics.<br>
--- attention You need to setAutoStep(false) first before it can work.<br>
--- param   delta   A float number.
---@param delta float
---@return cc.PhysicsWorld
function m:step(delta) end

--- Set the debug draw mask of this physics world.<br>
--- This physics world will draw shapes and joints by DrawNode according to mask.<br>
--- param mask Mask has four value:DEBUGDRAW_NONE, DEBUGDRAW_SHAPE, DEBUGDRAW_JOINT, DEBUGDRAW_CONTACT and DEBUGDRAW_ALL, default is DEBUGDRAW_NONE
---@param mask int
---@return cc.PhysicsWorld
function m:setDebugDrawMask(mask) end

--- Get the gravity value of this physics world.<br>
--- return A Vec2 object.
---@return cc.vec2
function m:getGravity() end

--- Set the update rate of this physics world<br>
--- Update rate is the value of EngineUpdateTimes/PhysicsWorldUpdateTimes.<br>
--- Set it higher can improve performance, set it lower can improve accuracy of physics world simulation.<br>
--- attention if you setAutoStep(false), this won't work.<br>
--- param rate An integer number, default value is 1.0.
---@param rate int
---@return cc.PhysicsWorld
function m:setUpdateRate(rate) end

---  get the number of substeps 
---@return int
function m:getFixedUpdateRate() end

--- Get the number of substeps of this physics world.<br>
--- return An integer number.
---@return int
function m:getSubsteps() end

--- Get the speed of this physics world.<br>
--- return A float number.
---@return float
function m:getSpeed() end

--- Get the update rate of this physics world.<br>
--- return An integer number.
---@return int
function m:getUpdateRate() end

--- Remove all bodies from physics world. <br>
--- If this world is not locked, those body are removed immediately, otherwise at next frame.
---@return cc.PhysicsWorld
function m:removeAllBodies() end

--- Set the speed of this physics world.<br>
--- attention if you setAutoStep(false), this won't work.<br>
--- param speed  A float number. Speed is the rate at which the simulation executes. default value is 1.0.
---@param speed float
---@return cc.PhysicsWorld
function m:setSpeed(speed) end

--- Get the nearest physics shape that contains the point. <br>
--- Query this physics world at point and return the closest shape.<br>
--- param   point   A Vec2 object contains the position of the point.<br>
--- return A PhysicsShape object pointer or nullptr if no shapes were found
---@param point cc.vec2
---@return cc.PhysicsShape
function m:getShape(point) end

--- Get a body by tag. <br>
--- param   tag   An integer number that identifies a PhysicsBody object. <br>
--- return A PhysicsBody object pointer or nullptr if no shapes were found.
---@param tag int
---@return cc.PhysicsBody
function m:getBody(tag) end



return m