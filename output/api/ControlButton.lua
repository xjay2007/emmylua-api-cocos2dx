--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.ControlButton : cc.Control
local m = {}

--- 
---@return boolean
function m:isPushed() end

--- Sets the title label to use for the specified state.<br>
--- If a property is not specified for a state, the default is to use<br>
--- the ButtonStateNormal value.<br>
--- param label The title label to use for the specified state.<br>
--- param state The state that uses the specified title. The values are described<br>
--- in "CCControlState".
---@param label cc.Node
---@param state int
---@return cc.ControlButton
function m:setTitleLabelForState(label, state) end

--- 
---@param adjustBackgroundImage boolean
---@return cc.ControlButton
function m:setAdjustBackgroundImage(adjustBackgroundImage) end

--- Sets the title string to use for the specified state.<br>
--- If a property is not specified for a state, the default is to use<br>
--- the ButtonStateNormal value.<br>
--- param title The title string to use for the specified state.<br>
--- param state The state that uses the specified title. The values are described<br>
--- in "CCControlState".
---@param title string
---@param state int
---@return cc.ControlButton
function m:setTitleForState(title, state) end

--- 
---@param var cc.vec2
---@return cc.ControlButton
function m:setLabelAnchorPoint(var) end

--- 
---@return cc.vec2
function m:getLabelAnchorPoint() end

--- 
---@param sprite ccui.Scale9Sprite
---@return boolean
function m:initWithBackgroundSprite(sprite) end

--- 
---@param state int
---@return float
function m:getTitleTTFSizeForState(state) end

--- 
---@param fntFile string
---@param state int
---@return cc.ControlButton
function m:setTitleTTFForState(fntFile, state) end

--- 
---@param size float
---@param state int
---@return cc.ControlButton
function m:setTitleTTFSizeForState(size, state) end

--- 
---@param var cc.Node
---@return cc.ControlButton
function m:setTitleLabel(var) end

--- 
---@param var cc.size
---@return cc.ControlButton
function m:setPreferredSize(var) end

--- 
---@return cc.c3b
function m:getCurrentTitleColor() end

--- 
---@param var boolean
---@return cc.ControlButton
function m:setZoomOnTouchDown(var) end

--- 
---@param var ccui.Scale9Sprite
---@return cc.ControlButton
function m:setBackgroundSprite(var) end

--- Returns the background sprite used for a state.<br>
--- param state The state that uses the background sprite. Possible values are<br>
--- described in "CCControlState".
---@param state int
---@return ccui.Scale9Sprite
function m:getBackgroundSpriteForState(state) end

--- 
---@return int
function m:getHorizontalOrigin() end

--- 
---@param title string
---@param fontName string
---@param fontSize float
---@return boolean
function m:initWithTitleAndFontNameAndFontSize(title, fontName, fontSize) end

--- Sets the font of the label, changes the label to a BMFont if necessary.<br>
--- param fntFile The name of the font to change to<br>
--- param state The state that uses the specified fntFile. The values are described<br>
--- in "CCControlState".
---@param fntFile string
---@param state int
---@return cc.ControlButton
function m:setTitleBMFontForState(fntFile, state) end

--- 
---@return float
function m:getScaleRatio() end

--- 
---@param state int
---@return string
function m:getTitleTTFForState(state) end

--- 
---@return ccui.Scale9Sprite
function m:getBackgroundSprite() end

--- Returns the title color used for a state.<br>
--- param state The state that uses the specified color. The values are described<br>
--- in "CCControlState".<br>
--- return The color of the title for the specified state.
---@param state int
---@return cc.c3b
function m:getTitleColorForState(state) end

--- Sets the color of the title to use for the specified state.<br>
--- param color The color of the title to use for the specified state.<br>
--- param state The state that uses the specified color. The values are described<br>
--- in "CCControlState".
---@param color cc.c3b
---@param state int
---@return cc.ControlButton
function m:setTitleColorForState(color, state) end

---  Adjust the background image. YES by default. If the property is set to NO, the<br>
--- background will use the preferred size of the background image. 
---@return boolean
function m:doesAdjustBackgroundImage() end

--- Sets the background spriteFrame to use for the specified button state.<br>
--- param spriteFrame The background spriteFrame to use for the specified state.<br>
--- param state The state that uses the specified image. The values are described<br>
--- in "CCControlState".
---@param spriteFrame cc.SpriteFrame
---@param state int
---@return cc.ControlButton
function m:setBackgroundSpriteFrameForState(spriteFrame, state) end

--- Sets the background sprite to use for the specified button state.<br>
--- param sprite The background sprite to use for the specified state.<br>
--- param state The state that uses the specified image. The values are described<br>
--- in "CCControlState".
---@param sprite ccui.Scale9Sprite
---@param state int
---@return cc.ControlButton
function m:setBackgroundSpriteForState(sprite, state) end

--- 
---@param var float
---@return cc.ControlButton
function m:setScaleRatio(var) end

--- 
---@param state int
---@return string
function m:getTitleBMFontForState(state) end

--- 
---@return cc.Node
function m:getTitleLabel() end

--- 
---@return cc.size
function m:getPreferredSize() end

--- 
---@return int
function m:getVerticalMargin() end

--- Returns the title label used for a state.<br>
--- param state The state that uses the title label. Possible values are described<br>
--- in "CCControlState".
---@param state int
---@return cc.Node
function m:getTitleLabelForState(state) end

--- 
---@param marginH int
---@param marginV int
---@return cc.ControlButton
function m:setMargins(marginH, marginV) end

---@return string
function m:getCurrentTitle() end

--- 
---@param label cc.Node
---@param backgroundSprite ccui.Scale9Sprite
---@param adjustBackGroundSize boolean
---@return boolean
function m:initWithLabelAndBackgroundSprite(label, backgroundSprite, adjustBackGroundSize) end

--- 
---@return boolean
function m:getZoomOnTouchDown() end

--- Returns the title used for a state.<br>
--- param state The state that uses the title. Possible values are described in<br>
--- "CCControlState".<br>
--- return The title for the specified state.
---@param state int
---@return string
function m:getTitleForState(state) end

---@overload fun(self:cc.ControlButton, label:ccui.Scale9Sprite):cc.ControlButton
---@overload fun(self:cc.ControlButton):cc.ControlButton
---@overload fun(self:cc.ControlButton, label:cc.Node, backgroundSprite:ccui.Scale9Sprite):cc.ControlButton
---@overload fun(self:cc.ControlButton, label:string, backgroundSprite:string, adjustBackGroundSize:float):cc.ControlButton
---@param label cc.Node
---@param backgroundSprite ccui.Scale9Sprite
---@param adjustBackGroundSize boolean
---@return cc.ControlButton
function m:create(label, backgroundSprite, adjustBackGroundSize) end

--- 
---@param enabled boolean
---@return cc.ControlButton
function m:setEnabled(enabled) end

--- 
---@param touch cc.Touch
---@param event cc.Event
---@return cc.ControlButton
function m:onTouchEnded(touch, event) end

--- 
---@param  cc.c3b
---@return cc.ControlButton
function m:setColor() end

--- 
---@param touch cc.Touch
---@param event cc.Event
---@return cc.ControlButton
function m:onTouchMoved(touch, event) end

--- 
---@param enabled boolean
---@return cc.ControlButton
function m:setSelected(enabled) end

--- 
---@param touch cc.Touch
---@param event cc.Event
---@return cc.ControlButton
function m:onTouchCancelled(touch, event) end

--- 
---@return cc.ControlButton
function m:needsLayout() end

--- 
---@param touch cc.Touch
---@param event cc.Event
---@return boolean
function m:onTouchBegan(touch, event) end

--- 
---@param parentOpacity uchar
---@return cc.ControlButton
function m:updateDisplayedOpacity(parentOpacity) end

--- 
---@return boolean
function m:init() end

--- 
---@param enabled boolean
---@return cc.ControlButton
function m:setHighlighted(enabled) end

--- 
---@param parentColor cc.c3b
---@return cc.ControlButton
function m:updateDisplayedColor(parentColor) end

--- 
---@param var uchar
---@return cc.ControlButton
function m:setOpacity(var) end

--- js ctor
---@return cc.ControlButton
function m:ControlButton() end



return m