--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccui.ListView : ccui.ScrollView
local m = {}

--- Set the gravity of ListView.<br>
--- see `ListViewGravity`
---@param gravity int
---@return ccui.ListView
function m:setGravity(gravity) end

--- Removes the last item of ListView.
---@return ccui.ListView
function m:removeLastItem() end

--- Get the left padding in ListView<br>
--- return Left padding in float
---@return float
function m:getLeftPadding() end

--- brief Query the center item<br>
--- return An item instance.
---@return ccui.Widget
function m:getCenterItemInCurrentView() end

--- brief Query current selected widget's index.<br>
--- return An index of a selected item.
---@return int
function m:getCurSelectedIndex() end

--- Get the time in seconds to scroll between items.<br>
--- return The time in seconds to scroll between items<br>
--- see setScrollDuration(float)
---@return float
function m:getScrollDuration() end

--- Query whether the magnetic out of boundary is allowed.
---@return boolean
function m:getMagneticAllowedOutOfBoundary() end

--- brief Query margin between each item in ListView.<br>
--- return A margin in float.
---@return float
function m:getItemsMargin() end

---@overload fun(self:ccui.ListView, itemIndex:int, positionRatioInView:cc.vec2, itemAnchorPoint:cc.vec2):ccui.ListView
---@param itemIndex int
---@param positionRatioInView cc.vec2
---@param itemAnchorPoint cc.vec2
---@param timeInSec float
---@return ccui.ListView
function m:scrollToItem(itemIndex, positionRatioInView, itemAnchorPoint, timeInSec) end

--- brief Jump to specific item<br>
--- param itemIndex Specifies the item's index<br>
--- param positionRatioInView Specifies the position with ratio in list view's content size.<br>
--- param itemAnchorPoint Specifies an anchor point of each item for position to calculate distance.
---@param itemIndex int
---@param positionRatioInView cc.vec2
---@param itemAnchorPoint cc.vec2
---@return ccui.ListView
function m:jumpToItem(itemIndex, positionRatioInView, itemAnchorPoint) end

--- Change padding with top padding<br>
--- param t Top padding in float
---@param t float
---@return ccui.ListView
function m:setTopPadding(t) end

--- Return the index of specified widget.<br>
--- param item  A widget pointer.<br>
--- return The index of a given widget in ListView.
---@param item ccui.Widget
---@return int
function m:getIndex(item) end

--- Insert a  custom item into the end of ListView.<br>
--- param item An item in `Widget*`.
---@param item ccui.Widget
---@return ccui.ListView
function m:pushBackCustomItem(item) end

--- brief Set current selected widget's index and call TouchEventType::ENDED event.<br>
--- param itemIndex A index of a selected item.
---@param itemIndex int
---@return ccui.ListView
function m:setCurSelectedIndex(itemIndex) end

--- Insert a default item(create by cloning model) into listview at a give index.<br>
--- param index  An index in ssize_t.
---@param index int
---@return ccui.ListView
function m:insertDefaultItem(index) end

--- Set magnetic type of ListView.<br>
--- see `MagneticType`
---@param magneticType int
---@return ccui.ListView
function m:setMagneticType(magneticType) end

--- Set magnetic allowed out of boundary.
---@param magneticAllowedOutOfBoundary boolean
---@return ccui.ListView
function m:setMagneticAllowedOutOfBoundary(magneticAllowedOutOfBoundary) end

--- Add an event click callback to ListView, then one item of Listview is clicked, the callback will be called.<br>
--- param callback A callback function with type of `ccListViewCallback`.
---@param callback fun
---@return ccui.ListView
function m:addEventListener(callback) end

--- 
---@return ccui.ListView
function m:doLayout() end

--- brief Query the topmost item in horizontal list<br>
--- return An item instance.
---@return ccui.Widget
function m:getTopmostItemInCurrentView() end

--- Change padding with left, top, right, and bottom padding.<br>
--- param l Left padding in float.<br>
--- param t Top margin in float.<br>
--- param r Right margin in float.<br>
--- param b Bottom margin in float.
---@param l float
---@param t float
---@param r float
---@param b float
---@return ccui.ListView
function m:setPadding(l, t, r, b) end

--- brief Remove all items in current ListView.
---@return ccui.ListView
function m:removeAllItems() end

--- Get the right padding in ListView<br>
--- return Right padding in float
---@return float
function m:getRightPadding() end

--- brief Query the bottommost item in horizontal list<br>
--- return An item instance.
---@return ccui.Widget
function m:getBottommostItemInCurrentView() end

--- Return all items in a ListView.<br>
--- returns A vector of widget pointers.
---@return any[]
function m:getItems() end

--- brief Query the leftmost item in horizontal list<br>
--- return An item instance.
---@return ccui.Widget
function m:getLeftmostItemInCurrentView() end

--- Set the margin between each item in ListView.<br>
--- param margin A margin in float.
---@param margin float
---@return ccui.ListView
function m:setItemsMargin(margin) end

--- Get magnetic type of ListView.
---@return int
function m:getMagneticType() end

--- Return an item at a given index.<br>
--- param index A given index in ssize_t.<br>
--- return A widget instance.
---@param index int
---@return ccui.Widget
function m:getItem(index) end

--- Remove an item at given index.<br>
--- param index A given index in ssize_t.
---@param index int
---@return ccui.ListView
function m:removeItem(index) end

--- Get the top padding in ListView<br>
--- return Top padding in float
---@return float
function m:getTopPadding() end

--- Insert a default item(create by a cloned model) at the end of the listview.
---@return ccui.ListView
function m:pushBackDefaultItem() end

--- Change padding with left padding<br>
--- param l Left padding in float.
---@param l float
---@return ccui.ListView
function m:setLeftPadding(l) end

--- brief Query the closest item to a specific position in inner container.<br>
--- param targetPosition Specifies the target position in inner container's coordinates.<br>
--- param itemAnchorPoint Specifies an anchor point of each item for position to calculate distance.<br>
--- return An item instance if list view is not empty. Otherwise, returns null.
---@param targetPosition cc.vec2
---@param itemAnchorPoint cc.vec2
---@return ccui.Widget
function m:getClosestItemToPosition(targetPosition, itemAnchorPoint) end

--- Change padding with bottom padding<br>
--- param b Bottom padding in float
---@param b float
---@return ccui.ListView
function m:setBottomPadding(b) end

--- Set the time in seconds to scroll between items.<br>
--- Subsequent calls of function 'scrollToItem', will take 'time' seconds for scrolling.<br>
--- param time The seconds needed to scroll between two items. 'time' must be >= 0<br>
--- see scrollToItem(ssize_t, const Vec2&, const Vec2&)
---@param time float
---@return ccui.ListView
function m:setScrollDuration(time) end

--- brief Query the closest item to a specific position in current view.<br>
--- For instance, to find the item in the center of view, call 'getClosestItemToPositionInCurrentView(Vec2::ANCHOR_MIDDLE, Vec2::ANCHOR_MIDDLE)'.<br>
--- param positionRatioInView Specifies the target position with ratio in list view's content size.<br>
--- param itemAnchorPoint Specifies an anchor point of each item for position to calculate distance.<br>
--- return An item instance if list view is not empty. Otherwise, returns null.
---@param positionRatioInView cc.vec2
---@param itemAnchorPoint cc.vec2
---@return ccui.Widget
function m:getClosestItemToPositionInCurrentView(positionRatioInView, itemAnchorPoint) end

--- brief Query the rightmost item in horizontal list<br>
--- return An item instance.
---@return ccui.Widget
function m:getRightmostItemInCurrentView() end

--- Change padding with right padding<br>
--- param r Right padding in float
---@param r float
---@return ccui.ListView
function m:setRightPadding(r) end

--- Set an item model for listview.<br>
--- When calling `pushBackDefaultItem`, the model will be used as a blueprint and new model copy will be inserted into ListView.<br>
--- param model  Model in `Widget*`.
---@param model ccui.Widget
---@return ccui.ListView
function m:setItemModel(model) end

--- Get the bottom padding in ListView<br>
--- return Bottom padding in float
---@return float
function m:getBottomPadding() end

--- brief Insert a custom widget into ListView at a given index.<br>
--- param item A widget pointer to be inserted.<br>
--- param index A given index in ssize_t.
---@param item ccui.Widget
---@param index int
---@return ccui.ListView
function m:insertCustomItem(item, index) end

--- Create an empty ListView.<br>
--- return A ListView instance.
---@return ccui.ListView
function m:create() end

--- 
---@return cc.Ref
function m:createInstance() end

---@overload fun(self:ccui.ListView, child:cc.Node, zOrder:int):ccui.ListView
---@overload fun(self:ccui.ListView, child:cc.Node):ccui.ListView
---@overload fun(self:ccui.ListView, child:cc.Node, zOrder:int, name:int):ccui.ListView
---@param child cc.Node
---@param zOrder int
---@param name string
---@return ccui.ListView
function m:addChild(child, zOrder, name) end

--- Override functions
---@return ccui.ListView
function m:jumpToBottom() end

--- 
---@return boolean
function m:init() end

--- Changes scroll direction of scrollview.<br>
--- Direction Direction::VERTICAL means vertical scroll, Direction::HORIZONTAL means horizontal scroll.<br>
--- param dir Set the list view's scroll direction.
---@param dir int
---@return ccui.ListView
function m:setDirection(dir) end

--- 
---@return ccui.ListView
function m:jumpToTopRight() end

--- 
---@return ccui.ListView
function m:jumpToLeft() end

--- 
---@param cleanup boolean
---@return ccui.ListView
function m:removeAllChildrenWithCleanup(cleanup) end

--- 
---@return ccui.ListView
function m:requestDoLayout() end

--- 
---@return ccui.ListView
function m:removeAllChildren() end

--- 
---@return ccui.ListView
function m:jumpToTopLeft() end

--- 
---@param child cc.Node
---@param cleanup boolean
---@return ccui.ListView
function m:removeChild(child, cleanup) end

--- 
---@return ccui.ListView
function m:jumpToBottomRight() end

--- 
---@return ccui.ListView
function m:jumpToTop() end

--- 
---@return ccui.ListView
function m:jumpToBottomLeft() end

--- 
---@param percent cc.vec2
---@return ccui.ListView
function m:jumpToPercentBothDirection(percent) end

--- 
---@param percent float
---@return ccui.ListView
function m:jumpToPercentHorizontal(percent) end

--- 
---@return ccui.ListView
function m:jumpToRight() end

--- 
---@return string
function m:getDescription() end

--- 
---@param percent float
---@return ccui.ListView
function m:jumpToPercentVertical(percent) end

--- Default constructor<br>
--- js ctor<br>
--- lua new
---@return ccui.ListView
function m:ListView() end



return m