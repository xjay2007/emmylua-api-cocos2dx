--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.SpriteFrame : cc.Ref
local m = {}

---  Set anchor point of the frame.<br>
--- param anchorPoint The anchor point of the sprite frame.
---@param anchorPoint cc.vec2
---@return cc.SpriteFrame
function m:setAnchorPoint(anchorPoint) end

---  Set texture of the frame, the texture is retained.<br>
--- param pobTexture The texture of the sprite frame.
---@param pobTexture cc.Texture2D
---@return cc.SpriteFrame
function m:setTexture(pobTexture) end

---  Get texture of the frame.<br>
--- return The texture of the sprite frame.
---@return cc.Texture2D
function m:getTexture() end

---  Set offset of the frame.<br>
--- param offsetInPixels The offset of the sprite frame, in pixels.
---@param offsetInPixels cc.vec2
---@return cc.SpriteFrame
function m:setOffsetInPixels(offsetInPixels) end

---  Get original size of the trimmed image.<br>
--- return The original size of the trimmed image, in pixels.
---@return cc.size
function m:getOriginalSizeInPixels() end

---  Set original size of the trimmed image.<br>
--- param sizeInPixels The original size of the trimmed image.
---@param sizeInPixels cc.size
---@return cc.SpriteFrame
function m:setOriginalSize(sizeInPixels) end

---  Get center rect of the frame.<br>
--- Useful to create 9-slice sprites<br>
--- return The center rect of the sprite frame in points
---@return cc.rect
function m:getCenterRect() end

---  Set rect of the sprite frame.<br>
--- param rectInPixels The rect of the sprite frame, in pixels.
---@param rectInPixels cc.rect
---@return cc.SpriteFrame
function m:setRectInPixels(rectInPixels) end

---  Get rect of the frame.<br>
--- return The rect of the sprite frame.
---@return cc.rect
function m:getRect() end

--- setCenterRect<br>
--- Useful to implement "9 sliced" sprites.<br>
--- The sprite will be sliced into a 3 x 3 grid. The four corners of this grid are applied without<br>
--- performing any scaling. The upper- and lower-middle parts are scaled horizontally, and the left- and right-middle parts are scaled vertically.<br>
--- The center is scaled in both directions.<br>
--- Important: The scaling is based the Sprite's trimmed size.<br>
--- Limitations: Does not work when the sprite is part of `SpriteBatchNode`.<br>
--- param centerRect the Rect in points
---@param centerRect cc.rect
---@return cc.SpriteFrame
function m:setCenterRectInPixels(centerRect) end

---  Set offset of the frame.<br>
--- param offsets The offset of the sprite frame.
---@param offsets cc.vec2
---@return cc.SpriteFrame
function m:setOffset(offsets) end

---@overload fun(self:cc.SpriteFrame, filename:string, rect:cc.rect):boolean
---@param filename string
---@param rect cc.rect
---@param rotated boolean
---@param offset cc.vec2
---@param originalSize cc.size
---@return boolean
function m:initWithTextureFilename(filename, rect, rotated, offset, originalSize) end

---  Set rect of the frame.<br>
--- param rect The rect of the sprite.
---@param rect cc.rect
---@return cc.SpriteFrame
function m:setRect(rect) end

---@overload fun(self:cc.SpriteFrame, pobTexture:cc.Texture2D, rect:cc.rect):boolean
---@param pobTexture cc.Texture2D
---@param rect cc.rect
---@param rotated boolean
---@param offset cc.vec2
---@param originalSize cc.size
---@return boolean
function m:initWithTexture(pobTexture, rect, rotated, offset, originalSize) end

---  Get original size of the trimmed image.<br>
--- return The original size of the trimmed image.
---@return cc.size
function m:getOriginalSize() end

--- 
---@return cc.SpriteFrame
function m:clone() end

---  Get rect of the sprite frame.<br>
--- return The rect of the sprite frame, in pixels.
---@return cc.rect
function m:getRectInPixels() end

--- Is the sprite frame rotated or not.<br>
--- return Is rotated if true.
---@return boolean
function m:isRotated() end

---  hasCenterRect<br>
--- return Whether or not it has a centerRect
---@return boolean
function m:hasCenterRect() end

---  Set rotated of the sprite frame.<br>
--- param rotated Rotated the sprite frame if true.
---@param rotated boolean
---@return cc.SpriteFrame
function m:setRotated(rotated) end

---  Get offset of the frame.<br>
--- return The offset of the sprite frame.
---@return cc.vec2
function m:getOffset() end

---  Set original size of the trimmed image.<br>
--- param sizeInPixels The original size of the trimmed image, in pixels.
---@param sizeInPixels cc.size
---@return cc.SpriteFrame
function m:setOriginalSizeInPixels(sizeInPixels) end

---  Get anchor point of the frame.<br>
--- return The anchor point of the sprite frame.
---@return cc.vec2
function m:getAnchorPoint() end

---  Check if anchor point is defined for the frame.<br>
--- return true if anchor point is available.
---@return boolean
function m:hasAnchorPoint() end

---  Get offset of the frame.<br>
--- return The offset of the sprite frame, in pixels.
---@return cc.vec2
function m:getOffsetInPixels() end

---@overload fun(self:cc.SpriteFrame, filename:string, rect:cc.rect):cc.SpriteFrame
---@param filename string
---@param rect cc.rect
---@param rotated boolean
---@param offset cc.vec2
---@param originalSize cc.size
---@return cc.SpriteFrame
function m:create(filename, rect, rotated, offset, originalSize) end

---@overload fun(self:cc.SpriteFrame, pobTexture:cc.Texture2D, rect:cc.rect):cc.SpriteFrame
---@param pobTexture cc.Texture2D
---@param rect cc.rect
---@param rotated boolean
---@param offset cc.vec2
---@param originalSize cc.size
---@return cc.SpriteFrame
function m:createWithTexture(pobTexture, rect, rotated, offset, originalSize) end

--- lua NA
---@return cc.SpriteFrame
function m:SpriteFrame() end



return m