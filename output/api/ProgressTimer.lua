--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.ProgressTimer : cc.Node
local m = {}

---  Initializes a progress timer with the sprite as the shape the timer goes through 
---@param sp cc.Sprite
---@return boolean
function m:initWithSprite(sp) end

---  Return the Reverse direction.<br>
--- return If the direction is Anti-clockwise,it will return true.
---@return boolean
function m:isReverseDirection() end

--- This allows the bar type to move the component at a specific rate.<br>
--- Set the component to 0 to make sure it stays at 100%.<br>
--- For example you want a left to right bar but not have the height stay 100%.<br>
--- Set the rate to be Vec2(0,1); and set the midpoint to = Vec2(0,.5f).<br>
--- param barChangeRate A Vec2.
---@param barChangeRate cc.vec2
---@return cc.ProgressTimer
function m:setBarChangeRate(barChangeRate) end

---  Percentages are from 0 to 100.<br>
--- return Percentages.
---@return float
function m:getPercentage() end

---  Set the sprite as the shape. <br>
--- param sprite The sprite as the shape.
---@param sprite cc.Sprite
---@return cc.ProgressTimer
function m:setSprite(sprite) end

---  Change the percentage to change progress. <br>
--- return A Type
---@return int
function m:getType() end

---  The image to show the progress percentage, retain. <br>
--- return A sprite.
---@return cc.Sprite
function m:getSprite() end

--- Midpoint is used to modify the progress start position.<br>
--- If you're using radials type then the midpoint changes the center point.<br>
--- If you're using bar type then the midpoint changes the bar growth.<br>
--- it expands from the center but clamps to the sprites edge so:<br>
--- you want a left to right then set the midpoint all the way to Vec2(0,y).<br>
--- you want a right to left then set the midpoint all the way to Vec2(1,y).<br>
--- you want a bottom to top then set the midpoint all the way to Vec2(x,0).<br>
--- you want a top to bottom then set the midpoint all the way to Vec2(x,1).<br>
--- param point A Vec2 point.
---@param point cc.vec2
---@return cc.ProgressTimer
function m:setMidpoint(point) end

---  Returns the BarChangeRate.<br>
--- return A barChangeRate.
---@return cc.vec2
function m:getBarChangeRate() end

---  Set the Reverse direction.<br>
--- param value If value is false it will clockwise,if is true it will Anti-clockwise.
---@param value boolean
---@return cc.ProgressTimer
function m:setReverseDirection(value) end

---  Returns the Midpoint. <br>
--- return A Vec2.
---@return cc.vec2
function m:getMidpoint() end

---  Set the initial percentage values. <br>
--- param percentage The initial percentage values.
---@param percentage float
---@return cc.ProgressTimer
function m:setPercentage(percentage) end

---  Set the ProgressTimer type. <br>
--- param type Is an Type.
---@param type int
---@return cc.ProgressTimer
function m:setType(type) end

---  Creates a progress timer with the sprite as the shape the timer goes through.<br>
--- param sp The sprite as the shape the timer goes through.<br>
--- return A ProgressTimer.
---@param sp cc.Sprite
---@return cc.ProgressTimer
function m:create(sp) end

--- 
---@param anchorPoint cc.vec2
---@return cc.ProgressTimer
function m:setAnchorPoint(anchorPoint) end

--- 
---@param renderer cc.Renderer
---@param transform mat4_table
---@param flags uint
---@return cc.ProgressTimer
function m:draw(renderer, transform, flags) end

--- 
---@param color cc.c3b
---@return cc.ProgressTimer
function m:setColor(color) end

--- 
---@return cc.c3b
function m:getColor() end

--- 
---@param opacity uchar
---@return cc.ProgressTimer
function m:setOpacity(opacity) end

--- 
---@return uchar
function m:getOpacity() end

--- js ctor
---@return cc.ProgressTimer
function m:ProgressTimer() end



return m