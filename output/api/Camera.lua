--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.Camera : cc.Node
local m = {}

--- Restore the FBO, RenderTargets and viewport.
---@return cc.Camera
function m:restore() end

--- get depth, camera with larger depth is drawn on top of camera with smaller depth, the depth of camera with CameraFlag::DEFAULT is 0, user defined camera is -1 by default
---@return char
function m:getDepth() end

--- get view projection matrix
---@return mat4_table
function m:getViewProjectionMatrix() end

--- 
---@return cc.Camera
function m:applyViewport() end

--- set the background brush. See CameraBackgroundBrush for more information.<br>
--- param clearBrush Brush used to clear the background
---@param clearBrush cc.CameraBackgroundBrush
---@return cc.Camera
function m:setBackgroundBrush(clearBrush) end

--- Make Camera looks at target<br>
--- param target The target camera is point at<br>
--- param up The up vector, usually it's Y axis
---@param target cc.vec3
---@param up cc.vec3
---@return cc.Camera
function m:lookAt(target, up) end

--- Apply the FBO, RenderTargets and viewport.
---@return cc.Camera
function m:apply() end

--- Get clear brush
---@return cc.CameraBackgroundBrush
function m:getBackgroundBrush() end

--- Gets the camera's projection matrix.<br>
--- return The camera projection matrix.
---@return mat4_table
function m:getProjectionMatrix() end

--- 
---@return boolean
function m:isBrushValid() end

--- Get object depth towards camera
---@param transform mat4_table
---@return float
function m:getDepthInView(transform) end

--- 
---@return cc.Camera
function m:restoreViewport() end

--- Before rendering scene with this camera, the background need to be cleared. It clears the depth buffer with max depth by default. Use setBackgroundBrush to modify the default behavior
---@return cc.Camera
function m:clearBackground() end

--- set additional matrix for the projection matrix, it multiplies mat to projection matrix when called, used by WP8
---@param mat mat4_table
---@return cc.Camera
function m:setAdditionalProjection(mat) end

--- Set Viewport for camera.
---@param vp cc.experimental::Viewport
---@return cc.Camera
function m:setViewport(vp) end

---  init camera 
---@return boolean
function m:initDefault() end

--- get & set Camera flag
---@return int
function m:getCameraFlag() end

--- Gets the type of camera.<br>
--- return The camera type.
---@return int
function m:getType() end

--- 
---@param zoomX float
---@param zoomY float
---@param nearPlane float
---@param farPlane float
---@return boolean
function m:initOrthographic(zoomX, zoomY, nearPlane, farPlane) end

--- get rendered order
---@return int
function m:getRenderOrder() end

--- Is this aabb visible in frustum
---@param aabb cc.AABB
---@return boolean
function m:isVisibleInFrustum(aabb) end

--- set depth, camera with larger depth is drawn on top of camera with smaller depth, the depth of camera with CameraFlag::DEFAULT is 0, user defined camera is -1 by default
---@param depth char
---@return cc.Camera
function m:setDepth(depth) end

--- Set the scene,this method shall not be invoke manually
---@param scene cc.Scene
---@return cc.Camera
function m:setScene(scene) end

--- 
---@param src cc.vec3
---@return cc.vec2
function m:projectGL(src) end

--- 
---@return cc.Camera
function m:restoreFrameBufferObject() end

--- Gets the camera's view matrix.<br>
--- return The camera view matrix.
---@return mat4_table
function m:getViewMatrix() end

--- Get the frustum's near plane.
---@return float
function m:getNearPlane() end

--- 
---@param src cc.vec3
---@return cc.vec2
function m:project(src) end

--- 
---@param flag int
---@return cc.Camera
function m:setCameraFlag(flag) end

--- Get the frustum's far plane.
---@return float
function m:getFarPlane() end

--- 
---@return cc.Camera
function m:applyFrameBufferObject() end

--- Set FBO, which will attach several render target for the rendered result.
---@param fbo cc.experimental::FrameBuffer
---@return cc.Camera
function m:setFrameBufferObject(fbo) end

--- Whether or not the viewprojection matrix was updated since the last frame.<br>
--- return True if the viewprojection matrix was updated since the last frame.
---@return boolean
function m:isViewProjectionUpdated() end

--- 
---@param fieldOfView float
---@param aspectRatio float
---@param nearPlane float
---@param farPlane float
---@return boolean
function m:initPerspective(fieldOfView, aspectRatio, nearPlane, farPlane) end

--- Creates an orthographic camera.<br>
--- param zoomX The zoom factor along the X-axis of the orthographic projection (the width of the ortho projection).<br>
--- param zoomY The zoom factor along the Y-axis of the orthographic projection (the height of the ortho projection).<br>
--- param nearPlane The near plane distance.<br>
--- param farPlane The far plane distance.
---@param zoomX float
---@param zoomY float
---@param nearPlane float
---@param farPlane float
---@return cc.Camera
function m:createOrthographic(zoomX, zoomY, nearPlane, farPlane) end

--- Get the visiting camera , the visiting camera shall be set on Scene::render
---@return cc.Camera
function m:getVisitingCamera() end

---  create default camera, the camera type depends on Director::getProjection, the depth of the default camera is 0 
---@return cc.Camera
function m:create() end

--- Creates a perspective camera.<br>
--- param fieldOfView The field of view for the perspective camera (normally in the range of 40-60 degrees).<br>
--- param aspectRatio The aspect ratio of the camera (normally the width of the viewport divided by the height of the viewport).<br>
--- param nearPlane The near plane distance.<br>
--- param farPlane The far plane distance.
---@param fieldOfView float
---@param aspectRatio float
---@param nearPlane float
---@param farPlane float
---@return cc.Camera
function m:createPerspective(fieldOfView, aspectRatio, nearPlane, farPlane) end

--- 
---@return cc.experimental::Viewport
function m:getDefaultViewport() end

--- 
---@param vp cc.experimental::Viewport
---@return cc.Camera
function m:setDefaultViewport(vp) end

--- Get the default camera of the current running scene.
---@return cc.Camera
function m:getDefaultCamera() end

--- 
---@param renderer cc.Renderer
---@param parentTransform mat4_table
---@param parentFlags uint
---@return cc.Camera
function m:visit(renderer, parentTransform, parentFlags) end

--- 
---@return cc.Camera
function m:Camera() end



return m