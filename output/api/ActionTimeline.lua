--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccs.ActionTimeline : ccs.Action,ccs.PlayableProtocol
local m = {}

--- 
---@return ccs.ActionTimeline
function m:clearFrameEndCallFuncs() end

--- add a frame end call back to animation's end frame<br>
--- param func the callback function
---@param animationName string
---@param func fun
---@return ccs.ActionTimeline
function m:setAnimationEndCallFunc(animationName, func) end

---  add Timeline to ActionTimeline 
---@param timeline ccs.Timeline
---@return ccs.ActionTimeline
function m:addTimeline(timeline) end

---  Get current frame. 
---@return int
function m:getCurrentFrame() end

---  Start frame index of this action
---@return int
function m:getStartFrame() end

---  Pause the animation. 
---@return ccs.ActionTimeline
function m:pause() end

---@return ccs.ActionTimeline
function m:start() end

--- 
---@return boolean
function m:init() end

--- 
---@param timeline ccs.Timeline
---@return ccs.ActionTimeline
function m:removeTimeline(timeline) end

--- 
---@return ccs.ActionTimeline
function m:clearFrameEventCallFunc() end

---  Last frame callback will call when arriving last frame 
---@param listener fun
---@return ccs.ActionTimeline
function m:setLastFrameCallFunc(listener) end

--- 
---@return any[]
function m:getTimelines() end

--- 
---@param animationName string
---@param loop boolean
---@return ccs.ActionTimeline
function m:play(animationName, loop) end

--- 
---@param animationName string
---@return ccs.AnimationInfo
function m:getAnimationInfo(animationName) end

---  Resume the animation. 
---@return ccs.ActionTimeline
function m:resume() end

---  add a callback function after played frameIndex<br>
--- param frameIndex the frame index call back after<br>
--- param funcKey for identity the callback function<br>
--- param func the callback function
---@param frameIndex int
---@param funcKey string
---@param func fun
---@return ccs.ActionTimeline
function m:addFrameEndCallFunc(frameIndex, funcKey, func) end

--- 
---@param animationName string
---@return ccs.ActionTimeline
function m:removeAnimationInfo(animationName) end

---  Get current animation speed. 
---@return float
function m:getTimeSpeed() end

---  AnimationInfo
---@param animationInfo ccs.AnimationInfo
---@return ccs.ActionTimeline
function m:addAnimationInfo(animationInfo) end

--- 
---@return int
function m:getDuration() end

---  Goto the specified frame index, and pause at this index.<br>
--- param startIndex The animation will pause at this index.
---@param startIndex int
---@return ccs.ActionTimeline
function m:gotoFrameAndPause(startIndex) end

---  Whether or not Action is playing. 
---@return boolean
function m:isPlaying() end

--- 
---@param frameIndex int
---@return ccs.ActionTimeline
function m:removeFrameEndCallFuncs(frameIndex) end

---@overload fun(self:ccs.ActionTimeline, startIndex:int, endIndex:boolean):ccs.ActionTimeline
---@overload fun(self:ccs.ActionTimeline, startIndex:int):ccs.ActionTimeline
---@overload fun(self:ccs.ActionTimeline, startIndex:int, endIndex:int, currentFrameIndex:boolean):ccs.ActionTimeline
---@param startIndex int
---@param endIndex int
---@param currentFrameIndex int
---@param loop boolean
---@return ccs.ActionTimeline
function m:gotoFrameAndPlay(startIndex, endIndex, currentFrameIndex, loop) end

--- 
---@param animationName string
---@return boolean
function m:IsAnimationInfoExists(animationName) end

---  End frame of this action.<br>
--- When action play to this frame, if action is not loop, then it will stop, <br>
--- or it will play from start frame again. 
---@return int
function m:getEndFrame() end

---  Set the animation speed, this will speed up or slow down the speed. 
---@param speed float
---@return ccs.ActionTimeline
function m:setTimeSpeed(speed) end

--- 
---@return ccs.ActionTimeline
function m:clearLastFrameCallFunc() end

---  duration of the whole action
---@param duration int
---@return ccs.ActionTimeline
function m:setDuration(duration) end

---  Set current frame index, this will cause action plays to this frame. 
---@param frameIndex int
---@return ccs.ActionTimeline
function m:setCurrentFrame(frameIndex) end

--- 
---@param frameIndex int
---@param funcKey string
---@return ccs.ActionTimeline
function m:removeFrameEndCallFunc(frameIndex, funcKey) end

--- 
---@return ccs.ActionTimeline
function m:create() end

--- 
---@param target cc.Node
---@return ccs.ActionTimeline
function m:startWithTarget(target) end

---  Returns a reverse of ActionTimeline. <br>
--- Not implement yet.
---@return ccs.ActionTimeline
function m:reverse() end

---  Returns a clone of ActionTimeline 
---@return ccs.ActionTimeline
function m:clone() end

--- 
---@return ccs.ActionTimeline
function m:stop() end

--- 
---@param delta float
---@return ccs.ActionTimeline
function m:step(delta) end

--- 
---@return boolean
function m:isDone() end

--- 
---@return ccs.ActionTimeline
function m:ActionTimeline() end



return m