--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccs.ArmatureDataManager : ccs.Ref
local m = {}

--- 
---@return table<any:any>
function m:getAnimationDatas() end

--- brief    remove animation data<br>
--- param     id the id of the animation data
---@param id string
---@return ccs.ArmatureDataManager
function m:removeAnimationData(id) end

--- Add armature data<br>
--- param id The id of the armature data<br>
--- param armatureData ArmatureData *
---@param id string
---@param armatureData ccs.ArmatureData
---@param configFilePath string
---@return ccs.ArmatureDataManager
function m:addArmatureData(id, armatureData, configFilePath) end

---@overload fun(self:ccs.ArmatureDataManager, imagePath:string):ccs.ArmatureDataManager
---@param imagePath string
---@param plistPath string
---@param configFilePath string
---@return ccs.ArmatureDataManager
function m:addArmatureFileInfo(imagePath, plistPath, configFilePath) end

--- 
---@param configFilePath string
---@return ccs.ArmatureDataManager
function m:removeArmatureFileInfo(configFilePath) end

--- 
---@return table<any:any>
function m:getTextureDatas() end

--- brief    get texture data<br>
--- param     id the id of the texture data you want to get<br>
--- return TextureData *
---@param id string
---@return ccs.TextureData
function m:getTextureData(id) end

--- brief    get armature data<br>
--- param    id the id of the armature data you want to get<br>
--- return    ArmatureData *
---@param id string
---@return ccs.ArmatureData
function m:getArmatureData(id) end

--- brief    get animation data from _animationDatas(Dictionary)<br>
--- param     id the id of the animation data you want to get<br>
--- return AnimationData *
---@param id string
---@return ccs.AnimationData
function m:getAnimationData(id) end

--- brief    add animation data<br>
--- param     id the id of the animation data<br>
--- return AnimationData *
---@param id string
---@param animationData ccs.AnimationData
---@param configFilePath string
---@return ccs.ArmatureDataManager
function m:addAnimationData(id, animationData, configFilePath) end

--- Init ArmatureDataManager
---@return boolean
function m:init() end

--- brief    remove armature data<br>
--- param    id the id of the armature data you want to get
---@param id string
---@return ccs.ArmatureDataManager
function m:removeArmatureData(id) end

--- 
---@return table<any:any>
function m:getArmatureDatas() end

--- brief    remove texture data<br>
--- param     id the id of the texture data you want to get
---@param id string
---@return ccs.ArmatureDataManager
function m:removeTextureData(id) end

--- brief    add texture data<br>
--- param     id the id of the texture data<br>
--- return TextureData *
---@param id string
---@param textureData ccs.TextureData
---@param configFilePath string
---@return ccs.ArmatureDataManager
function m:addTextureData(id, textureData, configFilePath) end

--- brief    Judge whether or not need auto load sprite file
---@return boolean
function m:isAutoLoadSpriteFile() end

--- brief    Add sprite frame to CCSpriteFrameCache, it will save display name and it's relative image name
---@param plistPath string
---@param imagePath string
---@param configFilePath string
---@return ccs.ArmatureDataManager
function m:addSpriteFrameFromFile(plistPath, imagePath, configFilePath) end

--- 
---@return ccs.ArmatureDataManager
function m:destroyInstance() end

--- 
---@return ccs.ArmatureDataManager
function m:getInstance() end



return m