--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccui.Text : ccui.Widget
local m = {}

--- Enable shadow for the label.<br>
--- todo support blur for shadow effect<br>
--- param shadowColor The color of shadow effect.<br>
--- param offset The offset of shadow effect.<br>
--- param blurRadius The blur radius of shadow effect.
---@return ccui.Text
function m:enableShadow() end

--- Gets the font size of label.<br>
--- return The font size.
---@return float
function m:getFontSize() end

--- 
---@return string
function m:getString() end

---@overload fun(self:ccui.Text):ccui.Text
---@param effect int
---@return ccui.Text
function m:disableEffect(effect) end

--- Return current effect type.
---@return int
function m:getLabelEffectType() end

---  Gets text color.<br>
--- return Text color.
---@return cc.c4b
function m:getTextColor() end

---  Sets text vertical alignment.<br>
--- param alignment vertical text alignment type
---@param alignment int
---@return ccui.Text
function m:setTextVerticalAlignment(alignment) end

--- Sets the font name of label.<br>
--- If you are trying to use a system font, you could just pass a font name<br>
--- If you are trying to use a TTF, you should pass a file path to the TTF file<br>
--- Usage:<br>
--- code<br>
--- create a system font UIText<br>
--- Text *text = Text::create("Hello", "Arial", 20);<br>
--- it will change the font to system font no matter the previous font type is TTF or system font<br>
--- text->setFontName("Marfelt");<br>
--- it will change the font to TTF font no matter the previous font type is TTF or system font<br>
--- text->setFontName("xxxx/xxx.ttf");<br>
--- endcode<br>
--- param name Font name.
---@param name string
---@return ccui.Text
function m:setFontName(name) end

--- Sets the touch scale enabled of label.<br>
--- param enabled Touch scale enabled of label.
---@param enabled boolean
---@return ccui.Text
function m:setTouchScaleChangeEnabled(enabled) end

--- Return shadow effect offset value.
---@return cc.size
function m:getShadowOffset() end

--- 
---@param text string
---@return ccui.Text
function m:setString(text) end

--- Return the outline effect size value.
---@return int
function m:getOutlineSize() end

--- 
---@param textContent string
---@param fontName string
---@param fontSize float
---@return boolean
function m:init(textContent, fontName, fontSize) end

--- Return the shadow effect blur radius.
---@return float
function m:getShadowBlurRadius() end

--- Gets the touch scale enabled of label.<br>
--- return  Touch scale enabled of label.
---@return boolean
function m:isTouchScaleChangeEnabled() end

---  Gets the font name.<br>
--- return Font name.
---@return string
function m:getFontName() end

--- Sets the rendering size of the text, you should call this method<br>
--- along with calling `ignoreContentAdaptWithSize(false)`, otherwise the text area<br>
--- size is calculated by the real size of the text content.<br>
--- param size The text rendering area size.
---@param size cc.size
---@return ccui.Text
function m:setTextAreaSize(size) end

--- Gets the string length of the label.<br>
--- Note: This length will be larger than the raw string length,<br>
--- if you want to get the raw string length,<br>
--- you should call this->getString().size() instead.<br>
--- return  String length.
---@return int
function m:getStringLength() end

---  Gets the render size in auto mode.<br>
--- return The size of render size in auto mode.
---@return cc.size
function m:getAutoRenderSize() end

--- Enable outline for the label.<br>
--- It only works on IOS and Android when you use System fonts.<br>
--- param outlineColor The color of outline.<br>
--- param outlineSize The size of outline.
---@param outlineColor cc.c4b
---@param outlineSize int
---@return ccui.Text
function m:enableOutline(outlineColor, outlineSize) end

--- Return current effect color value.
---@return cc.c4b
function m:getEffectColor() end

---  Gets the font type.<br>
--- return The font type.
---@return int
function m:getType() end

---  Gets text horizontal alignment.<br>
--- return Horizontal text alignment type
---@return int
function m:getTextHorizontalAlignment() end

--- Return whether the shadow effect is enabled.
---@return boolean
function m:isShadowEnabled() end

--- Sets the font size of label.<br>
--- param size The font size.
---@param size float
---@return ccui.Text
function m:setFontSize(size) end

--- Return the shadow effect color value.
---@return cc.c4b
function m:getShadowColor() end

---  Sets text color.<br>
--- param color Text color.
---@param color cc.c4b
---@return ccui.Text
function m:setTextColor(color) end

---  Only support for TTF.<br>
--- param glowColor The color of glow.
---@param glowColor cc.c4b
---@return ccui.Text
function m:enableGlow(glowColor) end

--- Provides a way to treat each character like a Sprite.<br>
--- warning No support system font.
---@param lettetIndex int
---@return cc.Sprite
function m:getLetter(lettetIndex) end

---  Gets text vertical alignment.<br>
--- return Vertical text alignment type
---@return int
function m:getTextVerticalAlignment() end

---  Return the text rendering area size.<br>
--- return The text rendering area size.
---@return cc.size
function m:getTextAreaSize() end

---  Sets text horizontal alignment.<br>
--- param alignment Horizontal text alignment type
---@param alignment int
---@return ccui.Text
function m:setTextHorizontalAlignment(alignment) end

---@overload fun(self:ccui.Text):ccui.Text
---@param textContent string
---@param fontName string
---@param fontSize float
---@return ccui.Text
function m:create(textContent, fontName, fontSize) end

--- 
---@return cc.Ref
function m:createInstance() end

--- 
---@return cc.Node
function m:getVirtualRenderer() end

--- 
---@return boolean
function m:init() end

--- Returns the "class name" of widget.
---@return string
function m:getDescription() end

--- 
---@return cc.size
function m:getVirtualRendererSize() end

--- Default constructor.<br>
--- js ctor<br>
--- lua new
---@return ccui.Text
function m:Text() end



return m