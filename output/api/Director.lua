--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.Director
local m = {}

---  Pauses the running scene.<br>
--- The running scene will be _drawed_ but all scheduled timers will be paused.<br>
--- While paused, the draw rate will be 4 FPS to reduce CPU consumption.
---@return cc.Director
function m:pause() end

--- Clones a projection matrix and put it to the top of projection matrix stack.<br>
--- param index The index of projection matrix stack.<br>
--- js NA
---@param index unsigned long
---@return cc.Director
function m:pushProjectionMatrix(index) end

---  Pops the top matrix of the projection matrix stack.<br>
--- param index The index of projection matrix stack.<br>
--- js NA
---@param index unsigned long
---@return cc.Director
function m:popProjectionMatrix(index) end

---  Sets the EventDispatcher associated with this director.<br>
--- since v3.0<br>
--- js NA
---@param dispatcher cc.EventDispatcher
---@return cc.Director
function m:setEventDispatcher(dispatcher) end

---  Adds an identity matrix to the top of projection matrix stack.<br>
--- param index The index of projection matrix stack.<br>
--- js NA
---@param index unsigned long
---@return cc.Director
function m:loadProjectionIdentityMatrix(index) end

---  The size in pixels of the surface. It could be different than the screen size.<br>
--- High-res devices might have a higher surface size than the screen size.<br>
--- Only available when compiled using SDK >= 4.0.<br>
--- since v0.99.4
---@param scaleFactor float
---@return cc.Director
function m:setContentScaleFactor(scaleFactor) end

--- Gets content scale factor.<br>
--- see Director::setContentScaleFactor()
---@return float
function m:getContentScaleFactor() end

---  Returns the size of the OpenGL view in pixels. 
---@return cc.size
function m:getWinSizeInPixels() end

--- 
---@return float
function m:getDeltaTime() end

---  Sets the OpenGL default values.<br>
--- It will enable alpha blending, disable depth test.<br>
--- js NA
---@return cc.Director
function m:setGLDefaultValues() end

---  Sets the ActionManager associated with this director.<br>
--- since v2.0
---@param actionManager cc.ActionManager
---@return cc.Director
function m:setActionManager(actionManager) end

---  Enables/disables OpenGL alpha blending. 
---@param on boolean
---@return cc.Director
function m:setAlphaBlending(on) end

--- Pops out all scenes from the stack until the root scene in the queue.<br>
--- This scene will replace the running one.<br>
--- Internally it will call `popToSceneStackLevel(1)`.
---@return cc.Director
function m:popToRootScene() end

--- Adds a matrix to the top of specified type of matrix stack.<br>
--- param type Matrix type.<br>
--- param mat The matrix that to be added.<br>
--- js NA
---@param type int
---@param mat mat4_table
---@return cc.Director
function m:loadMatrix(type, mat) end

---  This object will be visited after the main scene is visited.<br>
--- This object MUST implement the "visit" function.<br>
--- Useful to hook a notification object, like Notifications (http:github.com/manucorporat/CCNotifications)<br>
--- since v0.99.5
---@return cc.Node
function m:getNotificationNode() end

---  Returns the size of the OpenGL view in points. 
---@return cc.size
function m:getWinSize() end

--- 
---@return cc.TextureCache
function m:getTextureCache() end

---  Whether or not the replaced scene will receive the cleanup message.<br>
--- If the new scene is pushed, then the old scene won't receive the "cleanup" message.<br>
--- If the new scene replaces the old one, the it will receive the "cleanup" message.<br>
--- since v0.99.0
---@return boolean
function m:isSendCleanupToScene() end

---  Returns visible origin coordinate of the OpenGL view in points. 
---@return cc.vec2
function m:getVisibleOrigin() end

---@overload fun(self:cc.Director):cc.Director
---@param dt float
---@return cc.Director
function m:mainLoop(dt) end

---  Enables/disables OpenGL depth test. 
---@param on boolean
---@return cc.Director
function m:setDepthTest(on) end

--- Gets Frame Rate.<br>
--- js NA
---@return float
function m:getFrameRate() end

---  Get seconds per frame. 
---@return float
function m:getSecondsPerFrame() end

--- Clear all types of matrix stack, and add identity matrix to these matrix stacks.<br>
--- js NA
---@return cc.Director
function m:resetMatrixStack() end

--- Converts an OpenGL coordinate to a screen coordinate.<br>
--- Useful to convert node points to window points for calls such as glScissor.
---@param point cc.vec2
---@return cc.vec2
function m:convertToUI(point) end

--- Clones a specified type matrix and put it to the top of specified type of matrix stack.<br>
--- js NA
---@param type int
---@return cc.Director
function m:pushMatrix(type) end

---  Sets the default values based on the Configuration info. 
---@return cc.Director
function m:setDefaultValues() end

--- 
---@return boolean
function m:init() end

---  Sets the Scheduler associated with this director.<br>
--- since v2.0
---@param scheduler cc.Scheduler
---@return cc.Director
function m:setScheduler(scheduler) end

--- Multiplies a matrix to the top of projection matrix stack.<br>
--- param mat The matrix that to be multiplied.<br>
--- param index The index of projection matrix stack.<br>
--- js NA
---@param mat mat4_table
---@param index unsigned long
---@return cc.Director
function m:multiplyProjectionMatrix(mat, index) end

--- Gets the top matrix of specified type of matrix stack.<br>
--- js NA
---@param type int
---@return mat4_table
function m:getMatrix(type) end

--- returns whether or not the Director is in a valid state
---@return boolean
function m:isValid() end

---  The main loop is triggered again.<br>
--- Call this function only if [stopAnimation] was called earlier.<br>
--- warning Don't call this function to start the main loop. To run the main loop call runWithScene.
---@return cc.Director
function m:startAnimation() end

--- Get the GLView.<br>
--- lua NA
---@return cc.GLView
function m:getOpenGLView() end

---  Gets current running Scene. Director can only run one Scene at a time. 
---@return cc.Scene
function m:getRunningScene() end

---  Sets the glViewport.
---@return cc.Director
function m:setViewport() end

---  Stops the animation. Nothing will be drawn. The main loop won't be triggered anymore.<br>
--- If you don't want to pause your animation call [pause] instead.
---@return cc.Director
function m:stopAnimation() end

---  Pops out all scenes from the stack until it reaches `level`.<br>
--- If level is 0, it will end the director.<br>
--- If level is 1, it will pop all scenes until it reaches to root scene.<br>
--- If level is <= than the current stack level, it won't do anything.
---@param level int
---@return cc.Director
function m:popToSceneStackLevel(level) end

---  Resumes the paused scene.<br>
--- The scheduled timers will be activated again.<br>
--- The "delta time" will be 0 (as if the game wasn't paused).
---@return cc.Director
function m:resume() end

---  Whether or not `_nextDeltaTimeZero` is set to 0. 
---@return boolean
function m:isNextDeltaTimeZero() end

---  Sets clear values for the color buffers,<br>
--- value range of each element is [0.0, 1.0].<br>
--- js NA
---@param clearColor cc.c4f
---@return cc.Director
function m:setClearColor(clearColor) end

---  Ends the execution, releases the running scene.<br>
--- lua endToLua
---@return cc.Director
function m:endToLua() end

--- Sets the GLView. <br>
--- lua NA
---@param openGLView cc.GLView
---@return cc.Director
function m:setOpenGLView(openGLView) end

--- Converts a screen coordinate to an OpenGL coordinate.<br>
--- Useful to convert (multi) touch coordinates to the current layout (portrait or landscape).
---@param point cc.vec2
---@return cc.vec2
function m:convertToGL(point) end

---  Removes all cocos2d cached data.<br>
--- It will purge the TextureCache, SpriteFrameCache, LabelBMFont cache<br>
--- since v0.99.3
---@return cc.Director
function m:purgeCachedData() end

---  How many frames were called since the director started 
---@return uint
function m:getTotalFrames() end

--- Enters the Director's main loop with the given Scene.<br>
--- Call it to run only your FIRST scene.<br>
--- Don't call it if there is already a running scene.<br>
--- It will call pushScene: and then it will call startAnimation<br>
--- js NA
---@param scene cc.Scene
---@return cc.Director
function m:runWithScene(scene) end

--- Sets the notification node.<br>
--- see Director::getNotificationNode()
---@param node cc.Node
---@return cc.Director
function m:setNotificationNode(node) end

---  Draw the scene.<br>
--- This method is called every frame. Don't call it manually.
---@return cc.Director
function m:drawScene() end

--- 
---@return cc.Director
function m:restart() end

--- Pops out a scene from the stack.<br>
--- This scene will replace the running one.<br>
--- The running scene will be deleted. If there are no more scenes in the stack the execution is terminated.<br>
--- ONLY call it if there is a running scene.
---@return cc.Director
function m:popScene() end

---  Adds an identity matrix to the top of specified type of matrix stack.<br>
--- js NA
---@param type int
---@return cc.Director
function m:loadIdentityMatrix(type) end

---  Whether or not displaying the FPS on the bottom-left corner of the screen. 
---@return boolean
function m:isDisplayStats() end

---  Sets OpenGL projection. 
---@param projection int
---@return cc.Director
function m:setProjection(projection) end

---  Returns the Console associated with this director.<br>
--- since v3.0<br>
--- js NA
---@return cc.Console
function m:getConsole() end

--- Multiplies a matrix to the top of specified type of matrix stack.<br>
--- param type Matrix type.<br>
--- param mat The matrix that to be multiplied.<br>
--- js NA
---@param type int
---@param mat mat4_table
---@return cc.Director
function m:multiplyMatrix(type, mat) end

--- Gets the distance between camera and near clipping frame.<br>
--- It is correct for default camera that near clipping frame is same as the screen.
---@return float
function m:getZEye() end

--- Sets the delta time between current frame and next frame is 0.<br>
--- This value will be used in Schedule, and will affect all functions that are using frame delta time, such as Actions.<br>
--- This value will take effect only one time.
---@param nextDeltaTimeZero boolean
---@return cc.Director
function m:setNextDeltaTimeZero(nextDeltaTimeZero) end

---  Pops the top matrix of the specified type of matrix stack.<br>
--- js NA
---@param type int
---@return cc.Director
function m:popMatrix(type) end

--- Returns visible size of the OpenGL view in points.<br>
--- The value is equal to `Director::getWinSize()` if don't invoke `GLView::setDesignResolutionSize()`.
---@return cc.size
function m:getVisibleSize() end

--- Adds a matrix to the top of projection matrix stack.<br>
--- param mat The matrix that to be added.<br>
--- param index The index of projection matrix stack.<br>
--- js NA
---@param mat mat4_table
---@param index unsigned long
---@return cc.Director
function m:loadProjectionMatrix(mat, index) end

--- Init the projection matrix stack.<br>
--- param stackCount The size of projection matrix stack.<br>
--- js NA
---@param stackCount unsigned long
---@return cc.Director
function m:initProjectionMatrixStack(stackCount) end

---  Gets the Scheduler associated with this director.<br>
--- since v2.0
---@return cc.Scheduler
function m:getScheduler() end

--- Suspends the execution of the running scene, pushing it on the stack of suspended scenes.<br>
--- The new scene will be executed.<br>
--- Try to avoid big stacks of pushed scenes to reduce memory allocation. <br>
--- ONLY call it if there is a running scene.
---@param scene cc.Scene
---@return cc.Director
function m:pushScene(scene) end

---  Gets the FPS value. 
---@return float
function m:getAnimationInterval() end

---  Whether or not the Director is paused. 
---@return boolean
function m:isPaused() end

---  Display the FPS on the bottom-left corner of the screen. 
---@param displayStats boolean
---@return cc.Director
function m:setDisplayStats(displayStats) end

---  Gets the EventDispatcher associated with this director.<br>
--- since v3.0<br>
--- js NA
---@return cc.EventDispatcher
function m:getEventDispatcher() end

---  Replaces the running scene with a new one. The running scene is terminated.<br>
--- ONLY call it if there is a running scene.<br>
--- js NA
---@param scene cc.Scene
---@return cc.Director
function m:replaceScene(scene) end

---  Sets the FPS value. FPS = 1/interval. 
---@param interval float
---@return cc.Director
function m:setAnimationInterval(interval) end

---  Gets the ActionManager associated with this director.<br>
--- since v2.0
---@return cc.ActionManager
function m:getActionManager() end

--- Returns a shared instance of the director. <br>
--- js _getInstance
---@return cc.Director
function m:getInstance() end



return m