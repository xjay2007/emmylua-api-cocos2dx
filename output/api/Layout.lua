--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccui.Layout : ccui.Widget,ccui.LayoutProtocol
local m = {}

--- Sets background color vector for layout.<br>
--- This setting only take effect when layout's color type is BackGroundColorType::GRADIENT<br>
--- param vector The color vector in `Vec2`.
---@param vector cc.vec2
---@return ccui.Layout
function m:setBackGroundColorVector(vector) end

--- Change the clipping type of layout.<br>
--- On default, the clipping type is `ClippingType::STENCIL`.<br>
--- see `ClippingType`<br>
--- param type The clipping type of layout.
---@param type int
---@return ccui.Layout
function m:setClippingType(type) end

--- Sets Color Type for layout's background<br>
---@param type int
---@return ccui.Layout
function m:setBackGroundColorType(type) end

--- If a layout is loop focused which means that the focus movement will be inside the layout<br>
--- param loop  pass true to let the focus movement loop inside the layout
---@param loop boolean
---@return ccui.Layout
function m:setLoopFocus(loop) end

--- Set layout's background image color.<br>
--- param color Background color value in `Color3B`.
---@param color cc.c3b
---@return ccui.Layout
function m:setBackGroundImageColor(color) end

--- Get the layout's background color vector.<br>
--- return Background color vector.
---@return cc.vec2
function m:getBackGroundColorVector() end

--- see `setClippingType(ClippingType)`
---@return int
function m:getClippingType() end

--- 
---@return cc.ResourceData
function m:getRenderFile() end

--- return If focus loop is enabled, then it will return true, otherwise it returns false. The default value is false.
---@return boolean
function m:isLoopFocus() end

--- Remove the background image of layout.
---@return ccui.Layout
function m:removeBackGroundImage() end

--- Get the layout's background color opacity.<br>
--- return Background color opacity value.
---@return uchar
function m:getBackGroundColorOpacity() end

--- Gets if layout is clipping enabled.<br>
--- return if layout is clipping enabled.
---@return boolean
function m:isClippingEnabled() end

--- Set opacity of background image.<br>
--- param opacity Background image opacity in GLubyte.
---@param opacity uchar
---@return ccui.Layout
function m:setBackGroundImageOpacity(opacity) end

--- Sets a background image for layout.<br>
--- param fileName image file path.<br>
---@param fileName string
---@param texType int
---@return ccui.Layout
function m:setBackGroundImage(fileName, texType) end

---@overload fun(self:ccui.Layout, startColor:cc.c3b):ccui.Layout
---@param startColor cc.c3b
---@param endColor cc.c3b
---@return ccui.Layout
function m:setBackGroundColor(startColor, endColor) end

--- request to refresh widget layout
---@return ccui.Layout
function m:requestDoLayout() end

--- Query background image's capInsets size.<br>
--- return The background image capInsets.
---@return cc.rect
function m:getBackGroundImageCapInsets() end

--- Query the layout's background color.<br>
--- return Background color in Color3B.
---@return cc.c3b
function m:getBackGroundColor() end

--- Toggle layout clipping.<br>
--- If you do need clipping, you pass true to this function.<br>
--- param enabled Pass true to enable clipping, false otherwise.
---@param enabled boolean
---@return ccui.Layout
function m:setClippingEnabled(enabled) end

--- Get color of layout's background image.<br>
--- return Layout's background image color.
---@return cc.c3b
function m:getBackGroundImageColor() end

--- Query background image scale9 enable status.<br>
--- return Whether background image is scale9 enabled or not.
---@return boolean
function m:isBackGroundImageScale9Enabled() end

--- Query the layout's background color type.<br>
--- return The layout's background color type.
---@return int
function m:getBackGroundColorType() end

--- Get the gradient background end color.<br>
--- return Gradient background end color value.
---@return cc.c3b
function m:getBackGroundEndColor() end

--- Sets background color opacity of layout.<br>
--- param opacity The opacity in `GLubyte`.
---@param opacity uchar
---@return ccui.Layout
function m:setBackGroundColorOpacity(opacity) end

--- Get the opacity of layout's background image.<br>
--- return The opacity of layout's background image.
---@return uchar
function m:getBackGroundImageOpacity() end

--- return To query whether the layout will pass the focus to its children or not. The default value is true
---@return boolean
function m:isPassFocusToChild() end

--- Sets a background image capinsets for layout, it only affects the scale9 enabled background image<br>
--- param capInsets  The capInsets in Rect.
---@param capInsets cc.rect
---@return ccui.Layout
function m:setBackGroundImageCapInsets(capInsets) end

--- Gets background image texture size.<br>
--- return background image texture size.
---@return cc.size
function m:getBackGroundImageTextureSize() end

--- force refresh widget layout
---@return ccui.Layout
function m:forceDoLayout() end

--- Query layout type.<br>
--- return Get the layout type.
---@return int
function m:getLayoutType() end

--- param pass To specify whether the layout pass its focus to its child
---@param pass boolean
---@return ccui.Layout
function m:setPassFocusToChild(pass) end

--- Get the gradient background start color.<br>
--- return  Gradient background start color value.
---@return cc.c3b
function m:getBackGroundStartColor() end

--- Enable background image scale9 rendering.<br>
--- param enabled  True means enable scale9 rendering for background image, false otherwise.
---@param enabled boolean
---@return ccui.Layout
function m:setBackGroundImageScale9Enabled(enabled) end

--- Change the layout type.<br>
--- param type Layout type.
---@param type int
---@return ccui.Layout
function m:setLayoutType(type) end

--- Create a empty layout.
---@return ccui.Layout
function m:create() end

--- 
---@return cc.Ref
function m:createInstance() end

---@overload fun(self:ccui.Layout, child:cc.Node, localZOrder:int):ccui.Layout
---@overload fun(self:ccui.Layout, child:cc.Node):ccui.Layout
---@overload fun(self:ccui.Layout, child:cc.Node, localZOrder:int, name:int):ccui.Layout
---@param child cc.Node
---@param localZOrder int
---@param name string
---@return ccui.Layout
function m:addChild(child, localZOrder, name) end

--- Returns the "class name" of widget.
---@return string
function m:getDescription() end

--- Removes all children from the container, and do a cleanup to all running actions depending on the cleanup parameter.<br>
--- param cleanup   true if all running actions on all children nodes should be cleanup, false otherwise.<br>
--- js removeAllChildren<br>
--- lua removeAllChildren
---@param cleanup boolean
---@return ccui.Layout
function m:removeAllChildrenWithCleanup(cleanup) end

--- Removes all children from the container with a cleanup.<br>
--- see `removeAllChildrenWithCleanup(bool)`
---@return ccui.Layout
function m:removeAllChildren() end

--- When a widget is in a layout, you could call this method to get the next focused widget within a specified direction.<br>
--- If the widget is not in a layout, it will return itself<br>
--- param direction the direction to look for the next focused widget in a layout<br>
--- param current  the current focused widget<br>
--- return the next focused widget in a layout
---@param direction int
---@param current ccui.Widget
---@return ccui.Widget
function m:findNextFocusedWidget(direction, current) end

--- 
---@param child cc.Node
---@param cleanup boolean
---@return ccui.Layout
function m:removeChild(child, cleanup) end

--- 
---@return boolean
function m:init() end

--- Override function. Set camera mask, the node is visible by the camera whose camera flag & node's camera mask is true. <br>
--- param mask Mask being set<br>
--- param applyChildren If true call this function recursively from this node to its children.
---@param mask ushort
---@param applyChildren boolean
---@return ccui.Layout
function m:setCameraMask(mask, applyChildren) end

--- 
---@param globalZOrder float
---@return ccui.Layout
function m:setGlobalZOrder(globalZOrder) end

--- Default constructor<br>
--- js ctor<br>
--- lua new
---@return ccui.Layout
function m:Layout() end



return m