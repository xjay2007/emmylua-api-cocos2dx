--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.PhysicsJointSpring : cc.PhysicsJoint
local m = {}

---  Set the anchor point on body b.
---@param anchr2 cc.vec2
---@return cc.PhysicsJointSpring
function m:setAnchr2(anchr2) end

---  Set the anchor point on body a.
---@param anchr1 cc.vec2
---@return cc.PhysicsJointSpring
function m:setAnchr1(anchr1) end

---  Get the spring soft constant.
---@return float
function m:getDamping() end

---  Set the spring constant.
---@param stiffness float
---@return cc.PhysicsJointSpring
function m:setStiffness(stiffness) end

---  Get the distance of the anchor points.
---@return float
function m:getRestLength() end

---  Get the anchor point on body b.
---@return cc.vec2
function m:getAnchr2() end

---  Get the anchor point on body a.
---@return cc.vec2
function m:getAnchr1() end

---  Get the spring constant.
---@return float
function m:getStiffness() end

--- 
---@return boolean
function m:createConstraints() end

---  Set the distance of the anchor points.
---@param restLength float
---@return cc.PhysicsJointSpring
function m:setRestLength(restLength) end

---  Set the spring soft constant.
---@param damping float
---@return cc.PhysicsJointSpring
function m:setDamping(damping) end

---  Create a fixed distance joint.<br>
--- param a A is the body to connect.<br>
--- param b B is the body to connect.<br>
--- param anchr1 Anchr1 is the anchor point on body a.<br>
--- param anchr2 Anchr2 is the anchor point on body b.<br>
--- param stiffness It's the spring constant.<br>
--- param damping It's how soft to make the damping of the spring.<br>
--- return A object pointer.
---@param a cc.PhysicsBody
---@param b cc.PhysicsBody
---@param anchr1 cc.vec2
---@param anchr2 cc.vec2
---@param stiffness float
---@param damping float
---@return cc.PhysicsJointSpring
function m:construct(a, b, anchr1, anchr2, stiffness, damping) end



return m