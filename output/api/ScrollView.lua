--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccui.ScrollView : ccui.Layout
local m = {}

--- Scroll inner container to top boundary of scrollview.<br>
--- param timeInSec Time in seconds.<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToTop(timeInSec, attenuated) end

--- Scroll inner container to horizontal percent position of scrollview.<br>
--- param percent A value between 0 and 100.<br>
--- param timeInSec Time in seconds.<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param percent float
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToPercentHorizontal(percent, timeInSec, attenuated) end

--- brief Set the scroll bar's opacity<br>
--- param the scroll bar's opacity
---@param opacity uchar
---@return ccui.ScrollView
function m:setScrollBarOpacity(opacity) end

--- brief Toggle scroll bar enabled.<br>
--- param enabled True if enable scroll bar, false otherwise.
---@param enabled boolean
---@return ccui.ScrollView
function m:setScrollBarEnabled(enabled) end

--- brief Query inertia scroll state.<br>
--- return True if inertia is enabled, false otherwise.
---@return boolean
function m:isInertiaScrollEnabled() end

--- Scroll inner container to both direction percent position of scrollview.<br>
--- param percent A value between 0 and 100.<br>
--- param timeInSec Time in seconds.<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param percent cc.vec2
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToPercentBothDirection(percent, timeInSec, attenuated) end

--- return How far the scroll view is scrolled in both axes, combined as a Vec2
---@return cc.vec2
function m:getScrolledPercentBothDirection() end

--- Query scroll direction of scrollview.<br>
--- see `Direction`      Direction::VERTICAL means vertical scroll, Direction::HORIZONTAL means horizontal scroll<br>
--- return Scrollview scroll direction.
---@return int
function m:getDirection() end

--- brief Set the scroll bar's color<br>
--- param the scroll bar's color
---@param color cc.c3b
---@return ccui.ScrollView
function m:setScrollBarColor(color) end

--- Scroll inner container to bottom and left boundary of scrollview.<br>
--- param timeInSec Time in seconds.<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToBottomLeft(timeInSec, attenuated) end

--- Get inner container of scrollview.<br>
--- Inner container is a child of scrollview.<br>
--- return Inner container pointer.
---@return ccui.Layout
function m:getInnerContainer() end

--- Move inner container to bottom boundary of scrollview.
---@return ccui.ScrollView
function m:jumpToBottom() end

--- Set inner container position<br>
--- param pos Inner container position.
---@param pos cc.vec2
---@return ccui.ScrollView
function m:setInnerContainerPosition(pos) end

--- Changes scroll direction of scrollview.<br>
--- see `Direction`<br>
--- param dir Scroll direction enum.
---@param dir int
---@return ccui.ScrollView
function m:setDirection(dir) end

--- Scroll inner container to top and left boundary of scrollview.<br>
--- param timeInSec Time in seconds.<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToTopLeft(timeInSec, attenuated) end

--- Move inner container to top and right boundary of scrollview.
---@return ccui.ScrollView
function m:jumpToTopRight() end

--- Move inner container to top boundary of scrollview.
---@return ccui.ScrollView
function m:jumpToTop() end

--- Change inner container size of scrollview.<br>
--- Inner container size must be larger than or equal scrollview's size.<br>
--- param size Inner container size.
---@param size cc.size
---@return ccui.ScrollView
function m:setInnerContainerSize(size) end

--- Get inner container position<br>
--- return The inner container position.
---@return cc.vec2
function m:getInnerContainerPosition() end

--- return How far the scroll view is scrolled in the vertical axis
---@return float
function m:getScrolledPercentVertical() end

--- brief Query bounce state.<br>
--- return True if bounce is enabled, false otherwise.
---@return boolean
function m:isBounceEnabled() end

--- Move inner container to vertical percent position of scrollview.<br>
--- param percent A value between 0 and 100.
---@param percent float
---@return ccui.ScrollView
function m:jumpToPercentVertical(percent) end

--- Add callback function which will be called  when scrollview event triggered.<br>
--- param callback A callback function with type of `ccScrollViewCallback`.
---@param callback fun
---@return ccui.ScrollView
function m:addEventListener(callback) end

--- brief Set scroll bar auto hide time<br>
--- param scroll bar auto hide time
---@param autoHideTime float
---@return ccui.ScrollView
function m:setScrollBarAutoHideTime(autoHideTime) end

--- return Whether the ScrollView is currently scrolling because of a bounceback or inertia slowdown.
---@return boolean
function m:isAutoScrolling() end

--- brief Set the horizontal scroll bar position from left-bottom corner.<br>
--- param positionFromCorner The position from left-bottom corner
---@param positionFromCorner cc.vec2
---@return ccui.ScrollView
function m:setScrollBarPositionFromCornerForHorizontal(positionFromCorner) end

--- brief Toggle whether enable scroll inertia while scrolling.<br>
--- param enabled True if enable inertia, false otherwise.
---@param enabled boolean
---@return ccui.ScrollView
function m:setInertiaScrollEnabled(enabled) end

--- brief Set scroll bar auto hide state<br>
--- param scroll bar auto hide state
---@param autoHideEnabled boolean
---@return ccui.ScrollView
function m:setScrollBarAutoHideEnabled(autoHideEnabled) end

--- brief Get the scroll bar's color<br>
--- return the scroll bar's color
---@return cc.c3b
function m:getScrollBarColor() end

--- brief Set the scroll bar's width<br>
--- param width The scroll bar's width
---@param width float
---@return ccui.ScrollView
function m:setScrollBarWidth(width) end

--- Move inner container to top and left boundary of scrollview.
---@return ccui.ScrollView
function m:jumpToTopLeft() end

--- brief Query scroll bar state.<br>
--- return True if scroll bar is enabled, false otherwise.
---@return boolean
function m:isScrollBarEnabled() end

--- Move inner container to bottom and right boundary of scrollview.
---@return ccui.ScrollView
function m:jumpToBottomRight() end

--- brief Set the touch total time threshold<br>
--- param the touch total time threshold
---@param touchTotalTimeThreshold float
---@return ccui.ScrollView
function m:setTouchTotalTimeThreshold(touchTotalTimeThreshold) end

--- brief Get the touch total time threshold<br>
--- return the touch total time threshold
---@return float
function m:getTouchTotalTimeThreshold() end

--- brief Get the horizontal scroll bar's position from right-top corner.<br>
--- return positionFromCorner
---@return cc.vec2
function m:getScrollBarPositionFromCornerForHorizontal() end

--- return How far the scroll view is scrolled in the horizontal axis
---@return float
function m:getScrolledPercentHorizontal() end

--- brief Toggle bounce enabled when scroll to the edge.<br>
--- param enabled True if enable bounce, false otherwise.
---@param enabled boolean
---@return ccui.ScrollView
function m:setBounceEnabled(enabled) end

--- Immediately stops inner container scroll initiated by any of the "scrollTo*" member functions
---@return ccui.ScrollView
function m:stopAutoScroll() end

--- Scroll inner container to top and right boundary of scrollview.<br>
--- param timeInSec Time in seconds.<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToTopRight(timeInSec, attenuated) end

--- return Whether the user is currently dragging the ScrollView to scroll it
---@return boolean
function m:isScrolling() end

--- Scroll inner container to left boundary of scrollview.<br>
--- param timeInSec Time in seconds.<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToLeft(timeInSec, attenuated) end

--- Move inner container to both direction percent position of scrollview.<br>
--- param percent   A value between 0 and 100.
---@param percent cc.vec2
---@return ccui.ScrollView
function m:jumpToPercentBothDirection(percent) end

--- Scroll inner container to vertical percent position of scrollview.<br>
--- param percent A value between 0 and 100.<br>
--- param timeInSec Time in seconds.<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param percent float
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToPercentVertical(percent, timeInSec, attenuated) end

--- Scroll inner container to bottom boundary of scrollview.<br>
--- param timeInSec Time in seconds.<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToBottom(timeInSec, attenuated) end

--- brief Get the scroll bar's opacity<br>
--- return the scroll bar's opacity
---@return uchar
function m:getScrollBarOpacity() end

--- Scroll inner container to bottom and right boundary of scrollview.<br>
--- param timeInSec Time in seconds<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToBottomRight(timeInSec, attenuated) end

--- brief Set the scroll bar positions from the left-bottom corner (horizontal) and right-top corner (vertical).<br>
--- param positionFromCorner The position from the left-bottom corner (horizontal) and right-top corner (vertical).
---@param positionFromCorner cc.vec2
---@return ccui.ScrollView
function m:setScrollBarPositionFromCorner(positionFromCorner) end

--- brief Set the vertical scroll bar position from right-top corner.<br>
--- param positionFromCorner The position from right-top corner
---@param positionFromCorner cc.vec2
---@return ccui.ScrollView
function m:setScrollBarPositionFromCornerForVertical(positionFromCorner) end

--- brief Get the scroll bar's auto hide time<br>
--- return the scroll bar's auto hide time
---@return float
function m:getScrollBarAutoHideTime() end

--- Move inner container to left boundary of scrollview.
---@return ccui.ScrollView
function m:jumpToLeft() end

--- Scroll inner container to right boundary of scrollview.<br>
--- param timeInSec Time in seconds.<br>
--- param attenuated Whether scroll speed attenuate or not.
---@param timeInSec float
---@param attenuated boolean
---@return ccui.ScrollView
function m:scrollToRight(timeInSec, attenuated) end

--- brief Get the vertical scroll bar's position from right-top corner.<br>
--- return positionFromCorner
---@return cc.vec2
function m:getScrollBarPositionFromCornerForVertical() end

--- brief Get the scroll bar's width<br>
--- return the scroll bar's width
---@return float
function m:getScrollBarWidth() end

--- brief Query scroll bar auto hide state<br>
--- return True if scroll bar auto hide is enabled, false otherwise.
---@return boolean
function m:isScrollBarAutoHideEnabled() end

--- Move inner container to bottom and left boundary of scrollview.
---@return ccui.ScrollView
function m:jumpToBottomLeft() end

--- Move inner container to right boundary of scrollview.
---@return ccui.ScrollView
function m:jumpToRight() end

--- Get inner container size of scrollview.<br>
--- Inner container size must be larger than or equal scrollview's size.<br>
--- return The inner container size.
---@return cc.size
function m:getInnerContainerSize() end

--- Move inner container to horizontal percent position of scrollview.<br>
--- param percent   A value between 0 and 100.
---@param percent float
---@return ccui.ScrollView
function m:jumpToPercentHorizontal(percent) end

--- Create an empty ScrollView.<br>
--- return A ScrollView instance.
---@return ccui.ScrollView
function m:create() end

--- 
---@return cc.Ref
function m:createInstance() end

---@overload fun(self:ccui.ScrollView, child:cc.Node, localZOrder:int):ccui.ScrollView
---@overload fun(self:ccui.ScrollView, child:cc.Node):ccui.ScrollView
---@overload fun(self:ccui.ScrollView, child:cc.Node, localZOrder:int, name:int):ccui.ScrollView
---@param child cc.Node
---@param localZOrder int
---@param name string
---@return ccui.ScrollView
function m:addChild(child, localZOrder, name) end

--- 
---@return boolean
function m:init() end

--- 
---@param name string
---@return cc.Node
function m:getChildByName(name) end

--- Return the "class name" of widget.
---@return string
function m:getDescription() end

--- 
---@param dt float
---@return ccui.ScrollView
function m:update(dt) end

--- Get the layout type for scrollview.<br>
--- see `Layout::Type`<br>
--- return LayoutType
---@return int
function m:getLayoutType() end

--- 
---@param cleanup boolean
---@return ccui.ScrollView
function m:removeAllChildrenWithCleanup(cleanup) end

--- 
---@return ccui.ScrollView
function m:removeAllChildren() end

--- When a widget is in a layout, you could call this method to get the next focused widget within a specified direction.<br>
--- If the widget is not in a layout, it will return itself<br>
--- param direction the direction to look for the next focused widget in a layout<br>
--- param current  the current focused widget<br>
--- return the next focused widget in a layout
---@param direction int
---@param current ccui.Widget
---@return ccui.Widget
function m:findNextFocusedWidget(direction, current) end

--- 
---@param child cc.Node
---@param cleanup boolean
---@return ccui.ScrollView
function m:removeChild(child, cleanup) end

---@return any[]
function m:getChildren() end

--- 
---@param tag int
---@return cc.Node
function m:getChildByTag(tag) end

--- 
---@return int
function m:getChildrenCount() end

--- Set layout type for scrollview.<br>
--- see `Layout::Type`<br>
--- param type  Layout type enum.
---@param type int
---@return ccui.ScrollView
function m:setLayoutType(type) end

--- Default constructor<br>
--- js ctor<br>
--- lua new
---@return ccui.ScrollView
function m:ScrollView() end



return m