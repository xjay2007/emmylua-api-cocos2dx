--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccs.Armature : ccs.Node,ccs.BlendProtocol
local m = {}

--- Get a bone with the specified name<br>
--- param name The bone's name you want to get
---@param name string
---@return ccs.Bone
function m:getBone(name) end

--- Change a bone's parent with the specified parent name.<br>
--- param bone The bone you want to change parent<br>
--- param parentName The new parent's name.
---@param bone ccs.Bone
---@param parentName string
---@return ccs.Armature
function m:changeBoneParent(bone, parentName) end

--- 
---@param animation ccs.ArmatureAnimation
---@return ccs.Armature
function m:setAnimation(animation) end

--- 
---@param x float
---@param y float
---@return ccs.Bone
function m:getBoneAtPoint(x, y) end

--- 
---@return boolean
function m:getArmatureTransformDirty() end

--- 
---@param version float
---@return ccs.Armature
function m:setVersion(version) end

--- Set contentsize and Calculate anchor point.
---@return ccs.Armature
function m:updateOffsetPoint() end

--- 
---@return ccs.Bone
function m:getParentBone() end

--- Remove a bone with the specified name. If recursion it will also remove child Bone recursionly.<br>
--- param bone The bone you want to remove<br>
--- param recursion Determine whether remove the bone's child  recursion.
---@param bone ccs.Bone
---@param recursion boolean
---@return ccs.Armature
function m:removeBone(bone, recursion) end

--- 
---@return ccs.BatchNode
function m:getBatchNode() end

---@overload fun(self:ccs.Armature, name:string):boolean
---@param name string
---@param parentBone ccs.Bone
---@return boolean
function m:init(name, parentBone) end

--- 
---@param parentBone ccs.Bone
---@return ccs.Armature
function m:setParentBone(parentBone) end

--- 
---@param batchNode ccs.BatchNode
---@return ccs.Armature
function m:setBatchNode(batchNode) end

--- js NA<br>
--- lua NA
---@return cc.BlendFunc
function m:getBlendFunc() end

--- 
---@param armatureData ccs.ArmatureData
---@return ccs.Armature
function m:setArmatureData(armatureData) end

--- Add a Bone to this Armature,<br>
--- param bone  The Bone you want to add to Armature<br>
--- param parentName   The parent Bone's name you want to add to . If it's  nullptr, then set Armature to its parent
---@param bone ccs.Bone
---@param parentName string
---@return ccs.Armature
function m:addBone(bone, parentName) end

--- 
---@return ccs.ArmatureData
function m:getArmatureData() end

--- 
---@return float
function m:getVersion() end

--- 
---@return ccs.ArmatureAnimation
function m:getAnimation() end

--- 
---@return cc.vec2
function m:getOffsetPoints() end

--- js NA<br>
--- lua NA
---@param blendFunc cc.BlendFunc
---@return ccs.Armature
function m:setBlendFunc(blendFunc) end

--- Get Armature's bone dictionary<br>
--- return Armature's bone dictionary
---@return table<any:any>
function m:getBoneDic() end

---@overload fun(self:ccs.Armature, name:string):ccs.Armature
---@overload fun(self:ccs.Armature):ccs.Armature
---@param name string
---@param parentBone ccs.Bone
---@return ccs.Armature
function m:create(name, parentBone) end

--- 
---@param point cc.vec2
---@return ccs.Armature
function m:setAnchorPoint(point) end

--- 
---@param renderer cc.Renderer
---@param transform mat4_table
---@param flags uint
---@return ccs.Armature
function m:draw(renderer, transform, flags) end

--- 
---@return cc.vec2
function m:getAnchorPointInPoints() end

--- 
---@param dt float
---@return ccs.Armature
function m:update(dt) end

--- Init the empty armature
---@return boolean
function m:init() end

--- 
---@return mat4_table
function m:getNodeToParentTransform() end

--- This boundingBox will calculate all bones' boundingBox every time
---@return cc.rect
function m:getBoundingBox() end

--- js ctor
---@return ccs.Armature
function m:Armature() end



return m