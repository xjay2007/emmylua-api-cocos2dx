--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccs.Bone : ccs.Node
local m = {}

--- 
---@return boolean
function m:isTransformDirty() end

--- 
---@param blendFunc cc.BlendFunc
---@return ccs.Bone
function m:setBlendFunc(blendFunc) end

--- 
---@return boolean
function m:isIgnoreMovementBoneData() end

---  Update zorder
---@return ccs.Bone
function m:updateZOrder() end

--- 
---@return cc.Node
function m:getDisplayRenderNode() end

--- 
---@return boolean
function m:isBlendDirty() end

--- Add a child to this bone, and it will let this child call setParent(Bone *parent) function to set self to it's parent<br>
--- param     child  the child you want to add
---@param child ccs.Bone
---@return ccs.Bone
function m:addChildBone(child) end

--- 
---@return ccs.BaseData
function m:getWorldInfo() end

--- 
---@return ccs.Tween
function m:getTween() end

--- Get parent bone<br>
--- return parent bone
---@return ccs.Bone
function m:getParentBone() end

---  Update color to render display
---@return ccs.Bone
function m:updateColor() end

--- 
---@param dirty boolean
---@return ccs.Bone
function m:setTransformDirty(dirty) end

--- 
---@return int
function m:getDisplayRenderNodeType() end

--- 
---@param index int
---@return ccs.Bone
function m:removeDisplay(index) end

--- 
---@param boneData ccs.BoneData
---@return ccs.Bone
function m:setBoneData(boneData) end

--- Initializes a Bone with the specified name<br>
--- param name Bone's name.
---@param name string
---@return boolean
function m:init(name) end

--- Set parent bone.<br>
--- If parent is null, then also remove this bone from armature.<br>
--- It will not set the Armature, if you want to add the bone to a Armature, you should use Armature::addBone(Bone *bone, const char* parentName).<br>
--- param parent  the parent bone.<br>
--- nullptr : remove this bone from armature
---@param parent ccs.Bone
---@return ccs.Bone
function m:setParentBone(parent) end

---@overload fun(self:ccs.Bone, displayData:cc.Node, index:int):ccs.Bone
---@param displayData ccs.DisplayData
---@param index int
---@return ccs.Bone
function m:addDisplay(displayData, index) end

--- 
---@return cc.BlendFunc
function m:getBlendFunc() end

--- Remove itself from its parent.<br>
--- param recursion    whether or not to remove childBone's display
---@param recursion boolean
---@return ccs.Bone
function m:removeFromParent(recursion) end

--- 
---@return ccs.ColliderDetector
function m:getColliderDetector() end

--- 
---@return ccs.Armature
function m:getChildArmature() end

--- 
---@return ccs.FrameData
function m:getTweenData() end

--- 
---@param index int
---@param force boolean
---@return ccs.Bone
function m:changeDisplayWithIndex(index, force) end

--- 
---@param name string
---@param force boolean
---@return ccs.Bone
function m:changeDisplayWithName(name, force) end

--- 
---@param armature ccs.Armature
---@return ccs.Bone
function m:setArmature(armature) end

--- 
---@param dirty boolean
---@return ccs.Bone
function m:setBlendDirty(dirty) end

--- Removes a child Bone<br>
--- param     bone   the bone you want to remove
---@param bone ccs.Bone
---@param recursion boolean
---@return ccs.Bone
function m:removeChildBone(bone, recursion) end

--- 
---@param childArmature ccs.Armature
---@return ccs.Bone
function m:setChildArmature(childArmature) end

--- 
---@return mat4_table
function m:getNodeToArmatureTransform() end

--- 
---@return ccs.DisplayManager
function m:getDisplayManager() end

--- 
---@return ccs.Armature
function m:getArmature() end

--- 
---@return ccs.BoneData
function m:getBoneData() end

---@overload fun(self:ccs.Bone):ccs.Bone
---@param name string
---@return ccs.Bone
function m:create(name) end

--- 
---@return mat4_table
function m:getNodeToWorldTransform() end

--- 
---@param zOrder int
---@return ccs.Bone
function m:setLocalZOrder(zOrder) end

--- 
---@param delta float
---@return ccs.Bone
function m:update(delta) end

--- 
---@param parentOpacity uchar
---@return ccs.Bone
function m:updateDisplayedOpacity(parentOpacity) end

--- Initializes an empty Bone with nothing init.
---@return boolean
function m:init() end

--- 
---@param parentColor cc.c3b
---@return ccs.Bone
function m:updateDisplayedColor(parentColor) end

--- js ctor
---@return ccs.Bone
function m:Bone() end



return m