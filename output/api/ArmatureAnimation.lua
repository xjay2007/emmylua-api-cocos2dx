--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class ccs.ArmatureAnimation : ccs.ProcessBase
local m = {}

--- 
---@return float
function m:getSpeedScale() end

--- Play animation by animation name.<br>
--- param  animationName  The animation name you want to play<br>
--- param  durationTo The frames between two animation changing-over.<br>
--- It's meaning is changing to this animation need how many frames<br>
--- -1 : use the value from MovementData get from flash design panel<br>
--- param  loop   Whether the animation is loop<br>
--- loop < 0 : use the value from MovementData get from flash design panel<br>
--- loop = 0 : this animation is not loop<br>
--- loop > 0 : this animation is loop
---@param animationName string
---@param durationTo int
---@param loop int
---@return ccs.ArmatureAnimation
function m:play(animationName, durationTo, loop) end

--- Go to specified frame and pause current movement.
---@param frameIndex int
---@return ccs.ArmatureAnimation
function m:gotoAndPause(frameIndex) end

--- 
---@param movementIndexes any[]
---@param durationTo int
---@param loop boolean
---@return ccs.ArmatureAnimation
function m:playWithIndexes(movementIndexes, durationTo, loop) end

--- 
---@param data ccs.AnimationData
---@return ccs.ArmatureAnimation
function m:setAnimationData(data) end

--- Scale animation play speed.<br>
--- param animationScale Scale value
---@param speedScale float
---@return ccs.ArmatureAnimation
function m:setSpeedScale(speedScale) end

--- 
---@return ccs.AnimationData
function m:getAnimationData() end

--- Go to specified frame and play current movement.<br>
--- You need first switch to the movement you want to play, then call this function.<br>
--- example : playByIndex(0);<br>
--- gotoAndPlay(0);<br>
--- playByIndex(1);<br>
--- gotoAndPlay(0);<br>
--- gotoAndPlay(15);
---@param frameIndex int
---@return ccs.ArmatureAnimation
function m:gotoAndPlay(frameIndex) end

--- Init with a Armature<br>
--- param armature The Armature ArmatureAnimation will bind to
---@param armature ccs.Armature
---@return boolean
function m:init(armature) end

--- 
---@param movementNames any[]
---@param durationTo int
---@param loop boolean
---@return ccs.ArmatureAnimation
function m:playWithNames(movementNames, durationTo, loop) end

--- Get movement count
---@return int
function m:getMovementCount() end

--- 
---@param animationIndex int
---@param durationTo int
---@param loop int
---@return ccs.ArmatureAnimation
function m:playWithIndex(animationIndex, durationTo, loop) end

--- Get current movementID<br>
--- return The name of current movement
---@return string
function m:getCurrentMovementID() end

--- Create with a Armature<br>
--- param armature The Armature ArmatureAnimation will bind to
---@param armature ccs.Armature
---@return ccs.ArmatureAnimation
function m:create(armature) end

--- Pause the Process
---@return ccs.ArmatureAnimation
function m:pause() end

--- Stop the Process
---@return ccs.ArmatureAnimation
function m:stop() end

--- 
---@param dt float
---@return ccs.ArmatureAnimation
function m:update(dt) end

--- Resume the Process
---@return ccs.ArmatureAnimation
function m:resume() end

--- js ctor
---@return ccs.ArmatureAnimation
function m:ArmatureAnimation() end



return m