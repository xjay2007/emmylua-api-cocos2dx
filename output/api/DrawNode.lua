--------------------------------
--- generated by EmmyLua-Api-Cocos2dx-Generator
--------------------------------

---@class cc.DrawNode : cc.Node
local m = {}

---  Draw an line from origin to destination with color. <br>
--- param origin The line origin.<br>
--- param destination The line destination.<br>
--- param color The line color.<br>
--- js NA
---@param origin cc.vec2
---@param destination cc.vec2
---@param color cc.c4f
---@return cc.DrawNode
function m:drawLine(origin, destination, color) end

---@overload fun(self:cc.DrawNode, p1:cc.vec2, p2:cc.vec2, p3:cc.c4f):cc.DrawNode
---@param p1 cc.vec2
---@param p2 cc.vec2
---@param p3 cc.vec2
---@param p4 cc.vec2
---@param color cc.c4f
---@return cc.DrawNode
function m:drawRect(p1, p2, p3, p4, color) end

---@overload fun(self:cc.DrawNode, center:cc.vec2, radius:float, angle:float, segments:uint, scaleX:cc.c4f):cc.DrawNode
---@param center cc.vec2
---@param radius float
---@param angle float
---@param segments uint
---@param scaleX float
---@param scaleY float
---@param color cc.c4f
---@return cc.DrawNode
function m:drawSolidCircle(center, radius, angle, segments, scaleX, scaleY, color) end

--- 
---@param lineWidth float
---@return cc.DrawNode
function m:setLineWidth(lineWidth) end

--- js NA
---@param transform mat4_table
---@param flags uint
---@return cc.DrawNode
function m:onDrawGLPoint(transform, flags) end

---  draw a dot at a position, with a given radius and color. <br>
--- param pos The dot center.<br>
--- param radius The dot radius.<br>
--- param color The dot color.
---@param pos cc.vec2
---@param radius float
---@param color cc.c4f
---@return cc.DrawNode
function m:drawDot(pos, radius, color) end

---  draw a segment with a radius and color. <br>
--- param from The segment origin.<br>
--- param to The segment destination.<br>
--- param radius The segment radius.<br>
--- param color The segment color.
---@param from cc.vec2
---@param to cc.vec2
---@param radius float
---@param color cc.c4f
---@return cc.DrawNode
function m:drawSegment(from, to, radius, color) end

---  Get the color mixed mode.<br>
--- lua NA
---@return cc.BlendFunc
function m:getBlendFunc() end

--- js NA
---@param transform mat4_table
---@param flags uint
---@return cc.DrawNode
function m:onDraw(transform, flags) end

---@overload fun(self:cc.DrawNode, center:cc.vec2, radius:float, angle:float, segments:uint, drawLineToCenter:boolean, scaleX:cc.c4f):cc.DrawNode
---@param center cc.vec2
---@param radius float
---@param angle float
---@param segments uint
---@param drawLineToCenter boolean
---@param scaleX float
---@param scaleY float
---@param color cc.c4f
---@return cc.DrawNode
function m:drawCircle(center, radius, angle, segments, drawLineToCenter, scaleX, scaleY, color) end

---  Draws a quad bezier path.<br>
--- param origin The origin of the bezier path.<br>
--- param control The control of the bezier path.<br>
--- param destination The destination of the bezier path.<br>
--- param segments The number of segments.<br>
--- param color Set the quad bezier color.
---@param origin cc.vec2
---@param control cc.vec2
---@param destination cc.vec2
---@param segments uint
---@param color cc.c4f
---@return cc.DrawNode
function m:drawQuadBezier(origin, control, destination, segments, color) end

--- js NA
---@param transform mat4_table
---@param flags uint
---@return cc.DrawNode
function m:onDrawGLLine(transform, flags) end

---  draw a triangle with color. <br>
--- param p1 The triangle vertex point.<br>
--- param p2 The triangle vertex point.<br>
--- param p3 The triangle vertex point.<br>
--- param color The triangle color.<br>
--- js NA
---@param p1 cc.vec2
---@param p2 cc.vec2
---@param p3 cc.vec2
---@param color cc.c4f
---@return cc.DrawNode
function m:drawTriangle(p1, p2, p3, color) end

---  Set the color mixed mode.<br>
--- code<br>
--- When this function bound into js or lua,the parameter will be changed<br>
--- In js: var setBlendFunc(var src, var dst)<br>
--- endcode<br>
--- lua NA
---@param blendFunc cc.BlendFunc
---@return cc.DrawNode
function m:setBlendFunc(blendFunc) end

---  Clear the geometry in the node's buffer. 
---@return cc.DrawNode
function m:clear() end

---  Draws a solid rectangle given the origin and destination point measured in points.<br>
--- The origin and the destination can not have the same x and y coordinate.<br>
--- param origin The rectangle origin.<br>
--- param destination The rectangle destination.<br>
--- param color The rectangle color.<br>
--- js NA
---@param origin cc.vec2
---@param destination cc.vec2
---@param color cc.c4f
---@return cc.DrawNode
function m:drawSolidRect(origin, destination, color) end

--- 
---@return float
function m:getLineWidth() end

---  Draw a point.<br>
--- param point A Vec2 used to point.<br>
--- param pointSize The point size.<br>
--- param color The point color.<br>
--- js NA
---@param point cc.vec2
---@param pointSize float
---@param color cc.c4f
---@return cc.DrawNode
function m:drawPoint(point, pointSize, color) end

---  Draw a cubic bezier curve with color and number of segments<br>
--- param origin The origin of the bezier path.<br>
--- param control1 The first control of the bezier path.<br>
--- param control2 The second control of the bezier path.<br>
--- param destination The destination of the bezier path.<br>
--- param segments The number of segments.<br>
--- param color Set the cubic bezier color.
---@param origin cc.vec2
---@param control1 cc.vec2
---@param control2 cc.vec2
---@param destination cc.vec2
---@param segments uint
---@param color cc.c4f
---@return cc.DrawNode
function m:drawCubicBezier(origin, control1, control2, destination, segments, color) end

---  creates and initialize a DrawNode node.<br>
--- return Return an autorelease object.
---@return cc.DrawNode
function m:create() end

--- 
---@param renderer cc.Renderer
---@param transform mat4_table
---@param flags uint
---@return cc.DrawNode
function m:draw(renderer, transform, flags) end

--- 
---@return boolean
function m:init() end

--- 
---@return cc.DrawNode
function m:DrawNode() end



return m